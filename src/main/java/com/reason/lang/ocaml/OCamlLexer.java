/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.reason.lang.ocaml;

import com.intellij.psi.tree.IElementType;
import com.reason.lang.core.type.ORLangTypes;
import com.intellij.lexer.FlexLexer;

import static com.intellij.psi.TokenType.*;

@SuppressWarnings("ALL")

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>OCaml.flex</tt>
 */
public class OCamlLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int INITIAL = 2;
  public static final int IN_STRING = 4;
  public static final int IN_OCAML_ML_COMMENT = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /**
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\1\1\61\1\62\1\2\22\0\1\3\1\101\1\36\1\66\1\111\1\114\1\103\1\6"+
    "\1\64\1\105\1\65\1\27\1\104\1\73\1\24\1\76\1\14\1\23\2\37\4\13\2\7\1\70\1"+
    "\102\1\74\1\71\1\72\1\110\1\67\1\12\1\22\2\12\1\26\1\12\7\5\1\57\1\20\1\31"+
    "\2\5\1\60\4\5\1\16\2\5\1\77\1\32\1\100\1\113\1\10\1\63\1\40\1\21\1\45\1\42"+
    "\1\25\1\11\1\43\1\52\1\44\1\55\1\4\1\46\1\54\1\33\1\17\1\30\1\4\1\35\1\41"+
    "\1\34\1\50\1\56\1\47\1\15\1\53\1\51\1\106\1\75\1\107\1\112\6\0\1\61\242\0"+
    "\2\61\26\0");

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\4\1\7\2\4\1\11\1\4\1\12\4\4"+
    "\1\13\12\4\2\5\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\2\1\46"+
    "\1\47\1\50\2\46\1\0\1\51\1\0\1\7\1\52"+
    "\1\0\3\4\2\7\1\0\1\53\2\4\1\54\1\4"+
    "\1\55\3\4\1\56\1\57\4\4\1\60\6\4\1\61"+
    "\2\4\1\62\1\63\1\64\20\4\2\5\1\65\1\66"+
    "\1\67\2\0\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105"+
    "\1\106\1\107\1\110\1\111\1\112\1\113\1\114\1\115"+
    "\1\116\1\0\1\46\1\0\3\46\1\117\1\120\1\121"+
    "\1\51\2\121\3\0\2\52\1\0\1\122\1\4\1\123"+
    "\3\7\4\4\1\124\2\4\1\125\1\4\1\126\1\127"+
    "\1\4\1\130\1\4\1\131\2\4\1\132\1\133\1\4"+
    "\1\134\1\135\1\136\2\4\1\137\10\4\1\140\1\141"+
    "\2\4\1\142\1\143\4\4\1\144\3\4\1\145\1\4"+
    "\2\5\2\0\1\146\1\147\1\150\1\151\6\0\1\4"+
    "\1\52\1\7\1\4\1\152\4\4\1\153\2\4\1\154"+
    "\1\155\1\156\3\4\1\157\6\4\1\160\1\161\1\162"+
    "\1\163\1\164\1\4\1\165\5\4\1\166\1\167\1\170"+
    "\4\0\1\4\1\52\2\4\1\171\4\4\1\172\7\4"+
    "\1\173\1\174\2\4\1\175\2\4\1\0\1\176\1\177"+
    "\2\4\1\200\1\201\3\4\1\202\1\203\1\204\1\205"+
    "\4\4\1\206\1\207\2\4\1\210\1\211\3\4\1\212"+
    "\1\4\1\213\1\214\1\4\1\215\1\216\1\217\1\220"+
    "\3\4\1\221\3\4\1\222\1\223";

  private static int [] zzUnpackAction() {
    int [] result = new int[356];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\115\0\232\0\347\0\u0134\0\u0134\0\u0181\0\u01ce"+
    "\0\u021b\0\u0268\0\u02b5\0\u01ce\0\u0302\0\u034f\0\u039c\0\u03e9"+
    "\0\u0436\0\u0483\0\u04d0\0\u051d\0\u056a\0\u05b7\0\u0604\0\u0134"+
    "\0\u0651\0\u069e\0\u06eb\0\u0738\0\u0785\0\u07d2\0\u081f\0\u086c"+
    "\0\u08b9\0\u0906\0\u0953\0\u09a0\0\u09ed\0\u0a3a\0\u0a87\0\u0ad4"+
    "\0\u0b21\0\u0b6e\0\u0bbb\0\u0c08\0\u0c55\0\u0ca2\0\u0cef\0\u0d3c"+
    "\0\u0d89\0\u0134\0\u0dd6\0\u0e23\0\u0e70\0\u0134\0\u0134\0\u0134"+
    "\0\u0134\0\u0134\0\u0134\0\u0134\0\u0134\0\u0134\0\u0134\0\u0ebd"+
    "\0\u0f0a\0\u0134\0\u0134\0\u0f57\0\u0fa4\0\u0ff1\0\u103e\0\u108b"+
    "\0\u0134\0\u10d8\0\u1125\0\u1172\0\u11bf\0\u120c\0\u1259\0\u12a6"+
    "\0\u12f3\0\u01ce\0\u1340\0\u138d\0\u01ce\0\u13da\0\u1427\0\u1474"+
    "\0\u14c1\0\u150e\0\u0134\0\u0134\0\u155b\0\u15a8\0\u15f5\0\u1642"+
    "\0\u01ce\0\u168f\0\u16dc\0\u1729\0\u1776\0\u17c3\0\u1810\0\u185d"+
    "\0\u18aa\0\u18f7\0\u1944\0\u01ce\0\u1991\0\u19de\0\u1a2b\0\u1a78"+
    "\0\u1ac5\0\u1b12\0\u1b5f\0\u1bac\0\u1bf9\0\u1c46\0\u1c93\0\u1ce0"+
    "\0\u1d2d\0\u1d7a\0\u1dc7\0\u1e14\0\u1e61\0\u1eae\0\u1efb\0\u1f48"+
    "\0\u0134\0\u0134\0\u1f95\0\u1fe2\0\u0134\0\u202f\0\u0134\0\u0134"+
    "\0\u0134\0\u207c\0\u0134\0\u0134\0\u0134\0\u0134\0\u0134\0\u0134"+
    "\0\u0134\0\u0134\0\u0134\0\u0134\0\u0134\0\u0134\0\u0134\0\u0134"+
    "\0\u20c9\0\u0134\0\u0134\0\u0ebd\0\u2116\0\u2163\0\u21b0\0\u21fd"+
    "\0\u224a\0\u0134\0\u0134\0\u0134\0\u2297\0\u2297\0\u0ff1\0\u22e4"+
    "\0\u2331\0\u237e\0\u0134\0\u23cb\0\u2418\0\u01ce\0\u2465\0\u24b2"+
    "\0\u24ff\0\u254c\0\u2599\0\u25e6\0\u2633\0\u2680\0\u26cd\0\u0134"+
    "\0\u271a\0\u2767\0\u01ce\0\u27b4\0\u2801\0\u01ce\0\u284e\0\u01ce"+
    "\0\u289b\0\u01ce\0\u28e8\0\u2935\0\u01ce\0\u01ce\0\u2982\0\u01ce"+
    "\0\u01ce\0\u01ce\0\u29cf\0\u2a1c\0\u01ce\0\u2a69\0\u2ab6\0\u2b03"+
    "\0\u2b50\0\u2b9d\0\u2bea\0\u2c37\0\u2c84\0\u01ce\0\u01ce\0\u2cd1"+
    "\0\u2d1e\0\u01ce\0\u01ce\0\u2d6b\0\u2db8\0\u2e05\0\u2e52\0\u2e9f"+
    "\0\u2eec\0\u2f39\0\u2f86\0\u01ce\0\u2fd3\0\u3020\0\u306d\0\u30ba"+
    "\0\u3107\0\u0134\0\u0134\0\u0134\0\u0134\0\u3154\0\u31a1\0\u31ee"+
    "\0\u323b\0\u3288\0\u32d5\0\u3322\0\u336f\0\u1125\0\u33bc\0\u01ce"+
    "\0\u3409\0\u3456\0\u34a3\0\u34f0\0\u01ce\0\u353d\0\u358a\0\u01ce"+
    "\0\u01ce\0\u01ce\0\u35d7\0\u3624\0\u3671\0\u01ce\0\u36be\0\u370b"+
    "\0\u3758\0\u37a5\0\u37f2\0\u383f\0\u01ce\0\u01ce\0\u01ce\0\u01ce"+
    "\0\u01ce\0\u388c\0\u01ce\0\u38d9\0\u3926\0\u3973\0\u39c0\0\u3a0d"+
    "\0\u021b\0\u021b\0\u3a5a\0\u3aa7\0\u3af4\0\u3b41\0\u3b8e\0\u3bdb"+
    "\0\u1125\0\u3c28\0\u3c75\0\u01ce\0\u3cc2\0\u3d0f\0\u3d5c\0\u3da9"+
    "\0\u01ce\0\u3df6\0\u3e43\0\u3e90\0\u3edd\0\u3f2a\0\u3f77\0\u3fc4"+
    "\0\u01ce\0\u01ce\0\u4011\0\u405e\0\u01ce\0\u40ab\0\u40f8\0\u4145"+
    "\0\u0134\0\u0134\0\u4192\0\u41df\0\u01ce\0\u01ce\0\u422c\0\u4279"+
    "\0\u42c6\0\u01ce\0\u01ce\0\u01ce\0\u01ce\0\u4313\0\u4360\0\u43ad"+
    "\0\u43fa\0\u01ce\0\u01ce\0\u4447\0\u4494\0\u0134\0\u01ce\0\u44e1"+
    "\0\u452e\0\u457b\0\u01ce\0\u45c8\0\u01ce\0\u01ce\0\u4615\0\u01ce"+
    "\0\u01ce\0\u01ce\0\u01ce\0\u4662\0\u46af\0\u46fc\0\u01ce\0\u4749"+
    "\0\u4796\0\u47e3\0\u01ce\0\u01ce";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[356];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\115\5\1\6\3\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\11\1\13\1\16\1\10\1\11\1\17\1\11"+
    "\1\20\1\11\1\13\1\21\1\22\1\11\1\23\1\24"+
    "\1\11\1\6\1\25\1\26\1\27\1\30\1\13\1\31"+
    "\1\32\1\33\1\10\1\34\1\35\1\36\1\37\1\40"+
    "\3\10\1\41\1\10\1\42\1\43\1\44\1\6\1\7"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\2\77\1\100\27\77\1\101\3\77\1\102"+
    "\22\77\2\6\34\77\1\100\33\77\1\103\22\77\2\6"+
    "\1\77\1\104\1\105\27\77\116\0\3\7\56\0\1\7"+
    "\36\0\20\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\1\0\22\10\40\0\20\11\1\0\2\11\1\0\2\11"+
    "\1\0\3\11\1\0\22\11\34\0\1\106\2\0\1\106"+
    "\1\107\3\106\2\107\3\106\1\107\1\106\1\107\1\106"+
    "\1\107\3\106\1\107\2\106\1\107\1\106\1\110\3\107"+
    "\2\106\17\107\2\106\2\0\32\106\4\0\2\111\1\0"+
    "\2\13\2\0\2\13\4\111\2\0\1\13\1\112\2\113"+
    "\1\0\2\111\1\0\3\111\1\0\1\13\1\0\1\111"+
    "\1\0\2\111\1\0\13\111\40\0\13\10\1\114\4\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\1\0\1\10"+
    "\1\115\7\10\1\116\10\10\40\0\2\111\1\0\2\13"+
    "\2\0\2\13\2\117\2\120\2\121\1\13\1\112\2\113"+
    "\1\0\2\111\1\0\3\111\1\0\1\13\1\0\1\111"+
    "\1\0\2\111\1\0\13\111\40\0\5\10\1\122\7\10"+
    "\1\123\2\10\1\0\2\10\1\0\1\124\1\10\1\0"+
    "\2\10\1\125\1\0\22\10\40\0\20\10\1\0\1\126"+
    "\1\10\1\0\2\10\1\0\3\10\1\0\22\10\60\0"+
    "\1\127\74\0\11\10\1\130\6\10\1\0\2\10\1\0"+
    "\2\10\1\0\1\131\2\10\1\0\7\10\1\132\12\10"+
    "\60\0\1\133\2\0\1\134\71\0\20\10\1\0\2\10"+
    "\1\0\2\10\1\0\2\10\1\135\1\0\11\10\1\136"+
    "\10\10\40\0\13\10\1\137\4\10\1\0\1\140\1\10"+
    "\1\0\2\10\1\0\3\10\1\0\22\10\40\0\13\10"+
    "\1\141\4\10\1\0\2\10\1\0\2\10\1\0\2\10"+
    "\1\142\1\0\13\10\1\143\1\144\5\10\40\0\20\10"+
    "\1\0\1\145\1\10\1\0\2\10\1\0\3\10\1\0"+
    "\1\10\1\146\20\10\40\0\20\10\1\0\2\10\1\0"+
    "\2\10\1\0\1\147\2\10\1\0\2\10\1\150\17\10"+
    "\40\0\20\10\1\0\2\10\1\0\2\10\1\0\1\10"+
    "\1\151\1\10\1\0\5\10\1\152\14\10\40\0\13\10"+
    "\1\153\4\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\1\0\22\10\40\0\5\10\1\154\12\10\1\0\2\10"+
    "\1\0\2\10\1\0\1\155\2\10\1\0\22\10\40\0"+
    "\13\10\1\156\4\10\1\0\2\10\1\0\2\10\1\0"+
    "\3\10\1\0\7\10\1\157\12\10\40\0\11\10\1\160"+
    "\1\10\1\161\4\10\1\0\1\162\1\10\1\0\2\10"+
    "\1\0\3\10\1\0\1\10\1\163\1\164\17\10\40\0"+
    "\20\10\1\0\2\10\1\0\2\10\1\0\3\10\1\0"+
    "\5\10\1\165\5\10\1\166\6\10\40\0\20\10\1\0"+
    "\2\10\1\0\2\10\1\0\1\167\2\10\1\0\22\10"+
    "\40\0\13\10\1\170\4\10\1\0\1\171\1\10\1\0"+
    "\2\10\1\0\3\10\1\0\1\10\1\172\7\10\1\173"+
    "\10\10\40\0\20\10\1\0\2\10\1\0\2\10\1\0"+
    "\3\10\1\0\1\10\1\174\3\10\1\175\14\10\40\0"+
    "\13\11\1\176\4\11\1\0\2\11\1\0\2\11\1\0"+
    "\3\11\1\0\22\11\40\0\13\11\1\177\4\11\1\0"+
    "\2\11\1\0\2\11\1\0\3\11\1\0\22\11\40\0"+
    "\2\200\2\0\3\200\2\0\6\200\2\0\2\200\1\0"+
    "\2\200\1\0\3\200\2\0\21\200\121\0\1\201\53\0"+
    "\1\202\115\0\1\203\16\0\1\204\21\0\1\205\115\0"+
    "\1\206\115\0\1\207\1\210\1\211\113\0\1\212\1\213"+
    "\113\0\1\214\47\0\1\215\45\0\1\216\113\0\1\217"+
    "\1\220\1\221\2\0\1\222\110\0\1\223\2\0\1\224"+
    "\2\0\1\225\40\0\1\226\45\0\1\227\117\0\1\230"+
    "\110\0\1\231\125\0\1\232\115\0\1\233\12\0\1\77"+
    "\1\234\112\0\1\77\1\235\1\236\4\77\1\237\3\77"+
    "\2\237\1\240\1\77\1\241\3\77\1\237\13\77\1\237"+
    "\21\77\2\0\32\77\65\0\1\242\134\0\1\243\15\0"+
    "\1\244\112\0\2\245\1\246\15\245\1\0\2\245\1\0"+
    "\2\245\1\0\3\245\1\0\22\245\42\0\1\247\1\250"+
    "\3\0\2\250\1\251\1\0\1\252\1\0\1\106\1\0"+
    "\1\250\6\0\5\106\1\250\61\0\2\253\1\0\2\112"+
    "\2\0\2\112\4\253\2\0\1\112\1\0\2\113\1\0"+
    "\2\253\1\0\3\253\1\0\1\112\1\0\1\253\1\0"+
    "\2\253\1\0\13\253\43\0\1\254\3\0\2\254\6\0"+
    "\1\254\3\0\1\255\7\0\1\254\33\0\1\255\25\0"+
    "\20\10\1\0\2\10\1\0\2\10\1\0\2\10\1\256"+
    "\1\0\22\10\40\0\20\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\1\0\7\10\1\257\12\10\40\0\20\10"+
    "\1\0\2\10\1\0\2\10\1\0\1\260\2\10\1\0"+
    "\22\10\43\0\1\261\1\0\4\261\4\0\3\261\1\0"+
    "\2\261\10\0\2\261\1\0\1\261\2\0\1\261\62\0"+
    "\2\262\6\0\1\262\13\0\1\262\71\0\1\263\6\0"+
    "\1\263\75\0\20\10\1\0\2\10\1\0\2\10\1\0"+
    "\3\10\1\0\16\10\1\264\3\10\40\0\20\10\1\0"+
    "\1\265\1\10\1\0\2\10\1\0\1\10\1\266\1\10"+
    "\1\0\22\10\40\0\20\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\1\0\4\10\1\267\15\10\60\0\1\270"+
    "\74\0\20\10\1\0\2\10\1\0\2\10\1\0\1\10"+
    "\1\271\1\10\1\0\6\10\1\272\13\10\40\0\20\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\1\0\3\10"+
    "\1\273\16\10\40\0\20\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\1\0\2\10\1\274\17\10\40\0\20\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\1\0\5\10"+
    "\1\275\14\10\40\0\15\10\1\276\2\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\1\0\22\10\40\0\20\10"+
    "\1\0\2\10\1\0\2\10\1\0\1\277\2\10\1\0"+
    "\22\10\40\0\20\10\1\0\2\10\1\0\2\10\1\0"+
    "\3\10\1\0\10\10\1\300\11\10\40\0\20\10\1\0"+
    "\2\10\1\0\2\10\1\0\3\10\1\0\11\10\1\301"+
    "\2\10\1\302\5\10\40\0\20\10\1\0\1\303\1\10"+
    "\1\0\2\10\1\0\3\10\1\0\22\10\40\0\20\10"+
    "\1\0\2\10\1\0\1\304\1\10\1\0\3\10\1\0"+
    "\22\10\40\0\5\10\1\305\12\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\1\0\6\10\1\306\13\10\40\0"+
    "\20\10\1\0\2\10\1\0\2\10\1\0\3\10\1\0"+
    "\5\10\1\307\2\10\1\310\11\10\40\0\20\10\1\0"+
    "\2\10\1\0\2\10\1\0\3\10\1\0\3\10\1\311"+
    "\16\10\40\0\20\10\1\0\2\10\1\0\2\10\1\0"+
    "\2\10\1\312\1\0\2\10\1\313\17\10\40\0\20\10"+
    "\1\0\2\10\1\0\2\10\1\0\2\10\1\314\1\0"+
    "\22\10\40\0\20\10\1\0\2\10\1\0\2\10\1\0"+
    "\3\10\1\0\4\10\1\315\15\10\40\0\20\10\1\0"+
    "\2\10\1\0\2\10\1\0\1\316\2\10\1\0\10\10"+
    "\1\317\11\10\40\0\20\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\1\0\5\10\1\320\1\321\4\10\1\322"+
    "\6\10\40\0\20\10\1\0\2\10\1\0\2\10\1\0"+
    "\1\323\2\10\1\0\22\10\40\0\20\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\1\0\1\10\1\324\20\10"+
    "\40\0\13\10\1\325\4\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\1\0\22\10\40\0\20\10\1\0\2\10"+
    "\1\0\2\10\1\0\2\10\1\326\1\0\22\10\40\0"+
    "\20\10\1\0\2\10\1\0\2\10\1\0\1\10\1\327"+
    "\1\10\1\0\22\10\40\0\20\10\1\0\2\10\1\0"+
    "\2\10\1\0\1\330\2\10\1\0\12\10\1\331\7\10"+
    "\40\0\20\10\1\0\2\10\1\0\2\10\1\0\2\10"+
    "\1\332\1\0\7\10\1\333\12\10\40\0\20\10\1\0"+
    "\2\10\1\0\2\10\1\0\1\10\1\334\1\10\1\0"+
    "\22\10\40\0\20\10\1\0\1\335\1\10\1\0\2\10"+
    "\1\0\3\10\1\0\5\10\1\336\14\10\40\0\20\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\1\0\5\10"+
    "\1\337\14\10\40\0\20\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\1\0\3\10\1\340\16\10\40\0\20\10"+
    "\1\0\2\10\1\0\2\10\1\0\1\10\1\341\1\10"+
    "\1\0\22\10\40\0\20\10\1\0\2\10\1\0\2\10"+
    "\1\0\1\10\1\342\1\10\1\0\22\10\40\0\20\10"+
    "\1\0\2\10\1\0\2\10\1\0\1\10\1\343\1\10"+
    "\1\0\22\10\40\0\20\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\1\0\7\10\1\344\12\10\40\0\20\10"+
    "\1\0\2\10\1\0\2\10\1\0\2\10\1\345\1\0"+
    "\22\10\40\0\20\11\1\0\2\11\1\0\2\11\1\0"+
    "\1\346\2\11\1\0\22\11\40\0\20\11\1\0\2\11"+
    "\1\0\2\11\1\0\3\11\1\0\15\11\1\347\4\11"+
    "\40\0\20\200\1\0\2\200\1\0\2\200\1\0\3\200"+
    "\1\0\22\200\67\0\1\350\12\0\1\351\57\0\1\352"+
    "\172\0\1\353\116\0\1\354\114\0\1\355\26\0\1\235"+
    "\112\0\1\235\1\236\121\0\1\356\3\0\2\356\6\0"+
    "\1\356\13\0\1\356\64\0\1\357\1\0\4\357\4\0"+
    "\3\357\1\0\2\357\10\0\2\357\1\0\1\357\2\0"+
    "\1\357\63\0\1\360\6\0\1\360\13\0\1\360\61\0"+
    "\20\245\1\0\2\245\1\0\2\245\1\0\3\245\1\0"+
    "\22\245\43\0\1\361\3\0\2\361\6\0\1\361\13\0"+
    "\1\361\64\0\1\362\1\0\4\362\4\0\3\362\1\0"+
    "\2\362\10\0\2\362\1\0\1\362\2\0\1\362\63\0"+
    "\1\363\6\0\1\363\13\0\1\363\61\0\2\253\1\0"+
    "\2\254\2\0\2\254\4\253\2\0\1\254\4\0\2\253"+
    "\1\0\3\253\1\0\1\254\1\0\1\253\1\0\2\253"+
    "\1\0\13\253\43\0\1\254\3\0\2\254\6\0\1\254"+
    "\13\0\1\254\61\0\20\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\1\0\2\10\1\301\17\10\40\0\20\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\1\0\6\10"+
    "\1\364\13\10\40\0\2\111\1\0\6\261\4\111\3\261"+
    "\1\365\2\261\1\0\2\366\1\0\3\111\1\0\2\261"+
    "\1\111\1\261\2\111\1\261\13\111\40\0\2\111\2\0"+
    "\1\262\2\0\2\262\4\111\2\0\1\262\4\0\2\111"+
    "\1\0\3\111\1\0\1\262\1\0\1\111\1\0\2\111"+
    "\1\0\13\111\40\0\2\111\2\0\1\263\3\0\1\263"+
    "\4\111\2\0\1\263\4\0\2\111\1\0\3\111\3\0"+
    "\1\111\1\0\2\111\1\0\13\111\40\0\20\10\1\0"+
    "\1\367\1\10\1\0\2\10\1\0\3\10\1\0\22\10"+
    "\40\0\20\10\1\0\2\10\1\0\2\10\1\0\1\370"+
    "\2\10\1\0\22\10\40\0\20\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\1\0\5\10\1\371\14\10\40\0"+
    "\20\10\1\0\2\10\1\0\2\10\1\0\3\10\1\0"+
    "\5\10\1\372\14\10\40\0\20\10\1\0\1\373\1\10"+
    "\1\0\2\10\1\0\3\10\1\0\22\10\40\0\20\10"+
    "\1\0\1\374\1\10\1\0\2\10\1\0\3\10\1\0"+
    "\22\10\40\0\20\10\1\0\1\375\1\10\1\0\2\10"+
    "\1\0\3\10\1\0\22\10\40\0\20\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\1\0\17\10\1\376\2\10"+
    "\40\0\20\10\1\0\2\10\1\0\2\10\1\0\2\10"+
    "\1\377\1\0\22\10\40\0\20\10\1\0\1\u0100\1\10"+
    "\1\0\2\10\1\0\3\10\1\0\22\10\40\0\20\10"+
    "\1\0\2\10\1\0\2\10\1\0\1\u0101\2\10\1\0"+
    "\22\10\40\0\20\10\1\0\1\u0102\1\10\1\0\2\10"+
    "\1\0\3\10\1\0\22\10\40\0\20\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\1\0\2\10\1\u0103\17\10"+
    "\40\0\20\10\1\0\1\u0104\1\10\1\0\2\10\1\0"+
    "\3\10\1\0\22\10\40\0\20\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\1\0\11\10\1\u0105\10\10\40\0"+
    "\20\10\1\0\1\u0106\1\10\1\0\2\10\1\0\3\10"+
    "\1\0\22\10\40\0\20\10\1\0\2\10\1\0\2\10"+
    "\1\0\1\u0107\2\10\1\0\22\10\40\0\20\10\1\0"+
    "\2\10\1\0\2\10\1\0\1\10\1\u0108\1\10\1\0"+
    "\22\10\40\0\20\10\1\0\2\10\1\0\2\10\1\0"+
    "\3\10\1\0\7\10\1\u0109\12\10\40\0\20\10\1\0"+
    "\1\u010a\1\10\1\0\2\10\1\0\3\10\1\0\22\10"+
    "\40\0\20\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\1\0\2\10\1\u010b\17\10\40\0\20\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\1\0\2\10\1\u010c\17\10"+
    "\40\0\20\10\1\0\2\10\1\0\2\10\1\0\2\10"+
    "\1\u010d\1\0\22\10\40\0\20\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\1\0\3\10\1\u010e\16\10\40\0"+
    "\20\10\1\0\2\10\1\0\2\10\1\0\3\10\1\0"+
    "\14\10\1\u010f\5\10\40\0\20\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\1\0\13\10\1\u0110\6\10\40\0"+
    "\20\10\1\0\2\10\1\0\2\10\1\0\1\u0111\2\10"+
    "\1\0\22\10\40\0\20\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\1\0\7\10\1\u0112\12\10\40\0\20\10"+
    "\1\0\2\10\1\0\2\10\1\0\1\10\1\u0113\1\10"+
    "\1\0\22\10\40\0\20\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\1\0\11\10\1\u0114\10\10\40\0\20\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\1\0\13\10"+
    "\1\u0115\6\10\40\0\20\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\1\0\6\10\1\u0116\13\10\40\0\20\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\1\0\1\10"+
    "\1\u0117\20\10\40\0\20\10\1\0\2\10\1\0\2\10"+
    "\1\0\1\10\1\u0118\1\10\1\0\22\10\40\0\20\11"+
    "\1\0\1\u0119\1\11\1\0\2\11\1\0\3\11\1\0"+
    "\22\11\40\0\20\11\1\0\1\u011a\1\11\1\0\2\11"+
    "\1\0\3\11\1\0\22\11\76\0\1\u011b\113\0\1\u011c"+
    "\2\0\1\u011d\57\0\1\77\3\0\2\77\6\0\1\77"+
    "\13\0\1\77\64\0\1\77\1\0\4\77\4\0\3\77"+
    "\1\0\2\77\10\0\2\77\1\0\1\77\2\0\1\77"+
    "\62\0\2\u011e\6\0\1\u011e\13\0\1\u011e\64\0\1\106"+
    "\3\0\2\106\6\0\1\106\13\0\1\106\64\0\1\106"+
    "\1\0\4\106\4\0\3\106\1\0\2\106\10\0\2\106"+
    "\1\0\1\106\2\0\1\106\62\0\2\u011f\6\0\1\u011f"+
    "\13\0\1\u011f\61\0\20\10\1\0\2\10\1\0\2\10"+
    "\1\0\1\10\1\u0120\1\10\1\0\22\10\40\0\2\253"+
    "\1\0\6\365\4\253\3\365\1\0\2\365\1\0\2\u0121"+
    "\1\0\3\253\1\0\2\365\1\253\1\365\2\253\1\365"+
    "\13\253\40\0\20\10\1\0\2\10\1\0\2\10\1\0"+
    "\3\10\1\0\6\10\1\u0122\13\10\40\0\13\10\1\u0123"+
    "\4\10\1\0\2\10\1\0\2\10\1\0\3\10\1\0"+
    "\22\10\40\0\20\10\1\0\2\10\1\0\2\10\1\0"+
    "\1\u0124\2\10\1\0\22\10\40\0\20\10\1\0\2\10"+
    "\1\0\2\10\1\0\2\10\1\u0125\1\0\22\10\40\0"+
    "\20\10\1\0\2\10\1\0\1\u0126\1\10\1\0\3\10"+
    "\1\0\22\10\40\0\20\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\1\0\1\10\1\u0127\20\10\40\0\20\10"+
    "\1\0\1\u0128\1\10\1\0\2\10\1\0\3\10\1\0"+
    "\22\10\40\0\20\10\1\0\1\u0129\1\10\1\0\2\10"+
    "\1\0\3\10\1\0\22\10\40\0\20\10\1\0\2\10"+
    "\1\0\2\10\1\0\2\10\1\u012a\1\0\22\10\40\0"+
    "\20\10\1\0\2\10\1\0\2\10\1\0\3\10\1\0"+
    "\6\10\1\u012b\13\10\40\0\20\10\1\0\2\10\1\0"+
    "\2\10\1\0\1\10\1\u012c\1\10\1\0\22\10\40\0"+
    "\20\10\1\0\2\10\1\0\2\10\1\0\3\10\1\0"+
    "\5\10\1\u012d\14\10\40\0\20\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\1\0\11\10\1\u012e\10\10\40\0"+
    "\20\10\1\0\2\10\1\0\2\10\1\0\2\10\1\u012f"+
    "\1\0\22\10\40\0\20\10\1\0\2\10\1\0\2\10"+
    "\1\0\1\10\1\u0130\1\10\1\0\22\10\40\0\20\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\1\0\2\10"+
    "\1\u0131\17\10\40\0\20\10\1\0\1\u0132\1\10\1\0"+
    "\2\10\1\0\3\10\1\0\22\10\40\0\20\10\1\0"+
    "\2\10\1\0\2\10\1\0\3\10\1\0\7\10\1\u0133"+
    "\12\10\40\0\13\10\1\u0134\4\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\1\0\22\10\40\0\20\10\1\0"+
    "\2\10\1\0\2\10\1\0\3\10\1\0\13\10\1\u0135"+
    "\6\10\40\0\15\10\1\u0136\2\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\1\0\22\10\40\0\20\10\1\0"+
    "\2\10\1\0\2\10\1\0\3\10\1\0\11\10\1\u0137"+
    "\10\10\100\0\1\u0138\75\0\1\u0139\100\0\1\u013a\116\0"+
    "\2\77\6\0\1\77\13\0\1\77\70\0\2\106\6\0"+
    "\1\106\13\0\1\106\61\0\13\10\1\u013b\4\10\1\0"+
    "\2\10\1\0\2\10\1\0\3\10\1\0\5\10\1\u013c"+
    "\14\10\40\0\20\10\1\0\2\10\1\0\2\10\1\0"+
    "\1\10\1\u013d\1\10\1\0\22\10\40\0\20\10\1\0"+
    "\2\10\1\0\2\10\1\0\1\u013e\2\10\1\0\22\10"+
    "\40\0\20\10\1\0\2\10\1\0\2\10\1\0\1\u013f"+
    "\2\10\1\0\22\10\40\0\20\10\1\0\2\10\1\0"+
    "\2\10\1\0\1\10\1\u0140\1\10\1\0\22\10\40\0"+
    "\20\10\1\0\2\10\1\0\2\10\1\0\1\10\1\u0141"+
    "\1\10\1\0\22\10\40\0\20\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\1\0\6\10\1\u0142\13\10\40\0"+
    "\20\10\1\0\2\10\1\0\2\10\1\0\1\10\1\u0143"+
    "\1\10\1\0\22\10\40\0\20\10\1\0\2\10\1\0"+
    "\2\10\1\0\1\10\1\u0144\1\10\1\0\22\10\40\0"+
    "\13\10\1\u0145\4\10\1\0\2\10\1\0\2\10\1\0"+
    "\3\10\1\0\22\10\40\0\20\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\1\0\1\10\1\u0146\20\10\40\0"+
    "\20\10\1\0\2\10\1\0\2\10\1\0\3\10\1\0"+
    "\3\10\1\u0147\16\10\40\0\20\10\1\0\2\10\1\0"+
    "\2\10\1\0\3\10\1\0\5\10\1\u0148\14\10\40\0"+
    "\20\10\1\0\2\10\1\0\2\10\1\0\2\10\1\u0149"+
    "\1\0\22\10\40\0\20\10\1\0\1\u014a\1\10\1\0"+
    "\2\10\1\0\3\10\1\0\22\10\40\0\20\10\1\0"+
    "\2\10\1\0\2\10\1\0\3\10\1\0\3\10\1\u014b"+
    "\16\10\40\0\20\10\1\0\2\10\1\0\2\10\1\0"+
    "\3\10\1\0\7\10\1\u014c\12\10\40\0\20\10\1\0"+
    "\2\10\1\0\2\10\1\0\3\10\1\0\1\10\1\u014d"+
    "\20\10\45\0\1\u014e\107\0\20\10\1\0\2\10\1\0"+
    "\2\10\1\0\2\10\1\u014f\1\0\22\10\40\0\13\10"+
    "\1\u0150\4\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\1\0\22\10\40\0\20\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\1\0\1\10\1\u0151\20\10\40\0\20\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\1\0\5\10"+
    "\1\u0152\14\10\40\0\20\10\1\0\1\u0153\1\10\1\0"+
    "\2\10\1\0\3\10\1\0\22\10\40\0\20\10\1\0"+
    "\2\10\1\0\2\10\1\0\3\10\1\0\7\10\1\u0154"+
    "\12\10\40\0\20\10\1\0\1\u0155\1\10\1\0\2\10"+
    "\1\0\3\10\1\0\22\10\40\0\20\10\1\0\2\10"+
    "\1\0\2\10\1\0\1\10\1\u0156\1\10\1\0\22\10"+
    "\40\0\20\10\1\0\2\10\1\0\2\10\1\0\3\10"+
    "\1\0\1\10\1\u0157\20\10\40\0\20\10\1\0\1\u0158"+
    "\1\10\1\0\2\10\1\0\3\10\1\0\22\10\40\0"+
    "\20\10\1\0\2\10\1\0\2\10\1\0\3\10\1\0"+
    "\7\10\1\u0159\12\10\40\0\20\10\1\0\2\10\1\0"+
    "\2\10\1\0\1\u015a\2\10\1\0\22\10\40\0\20\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\1\0\7\10"+
    "\1\u015b\12\10\40\0\13\10\1\u015c\4\10\1\0\2\10"+
    "\1\0\2\10\1\0\3\10\1\0\22\10\40\0\20\10"+
    "\1\0\2\10\1\0\2\10\1\0\3\10\1\0\5\10"+
    "\1\u015d\14\10\40\0\20\10\1\0\2\10\1\0\2\10"+
    "\1\0\3\10\1\0\5\10\1\u015e\14\10\40\0\20\10"+
    "\1\0\2\10\1\0\2\10\1\0\1\u015f\2\10\1\0"+
    "\22\10\40\0\20\10\1\0\2\10\1\0\2\10\1\0"+
    "\3\10\1\0\12\10\1\u0160\7\10\40\0\20\10\1\0"+
    "\2\10\1\0\2\10\1\0\1\u0161\2\10\1\0\22\10"+
    "\40\0\20\10\1\0\1\u0162\1\10\1\0\2\10\1\0"+
    "\3\10\1\0\22\10\40\0\20\10\1\0\2\10\1\0"+
    "\2\10\1\0\1\10\1\u0163\1\10\1\0\22\10\40\0"+
    "\20\10\1\0\2\10\1\0\2\10\1\0\2\10\1\u0164"+
    "\1\0\22\10\34\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18480];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\2\11\21\1\1\11\31\1\1\11\3\1\12\11"+
    "\2\1\2\11\2\1\1\0\1\1\1\0\1\11\1\1"+
    "\1\0\5\1\1\0\11\1\2\11\44\1\2\11\2\0"+
    "\1\11\1\1\3\11\1\1\16\11\1\1\2\11\1\0"+
    "\1\1\1\0\3\1\3\11\3\1\3\0\1\11\1\1"+
    "\1\0\12\1\1\11\57\1\2\0\4\11\6\0\50\1"+
    "\4\0\30\1\1\0\2\11\23\1\1\11\26\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[356];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    public OCamlLexer() {
        this.types = OclTypes.INSTANCE;
    }

    private ORLangTypes types;
    private int tokenStartIndex;
    private CharSequence quotedStringId;
    private int commentDepth;
    private boolean inCommentString = false;

    // Store the start index of a token
    private void tokenStart() {
        tokenStartIndex = zzStartRead;
    }

    // Set the start index of the token to the stored index
    private void tokenEnd() {
        zzStartRead = tokenStartIndex;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public OCamlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        switch (zzLexicalState) {
            case IN_STRING: {
              yybegin(INITIAL); tokenEnd(); return types.STRING_VALUE;
            }  // fall though
            case 357: break;
            case IN_OCAML_ML_COMMENT: {
              yybegin(INITIAL); tokenEnd(); return types.MULTI_COMMENT;
            }  // fall though
            case 358: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yybegin(INITIAL); yypushback(1);
            }
            // fall through
          case 148: break;
          case 2:
            { return BAD_CHARACTER;
            }
            // fall through
          case 149: break;
          case 3:
            { return WHITE_SPACE;
            }
            // fall through
          case 150: break;
          case 4:
            { return types.LIDENT;
            }
            // fall through
          case 151: break;
          case 5:
            { return types.UIDENT;
            }
            // fall through
          case 152: break;
          case 6:
            { return types.SINGLE_QUOTE;
            }
            // fall through
          case 153: break;
          case 7:
            { return types.INT_VALUE;
            }
            // fall through
          case 154: break;
          case 8:
            { return types.UNDERSCORE;
            }
            // fall through
          case 155: break;
          case 9:
            { return types.DOT;
            }
            // fall through
          case 156: break;
          case 10:
            { return types.PLUS;
            }
            // fall through
          case 157: break;
          case 11:
            { yybegin(IN_STRING); tokenStart();
            }
            // fall through
          case 158: break;
          case 12:
            { return types.BACKTICK;
            }
            // fall through
          case 159: break;
          case 13:
            { return types.LPAREN;
            }
            // fall through
          case 160: break;
          case 14:
            { return types.STAR;
            }
            // fall through
          case 161: break;
          case 15:
            { return types.SHARP;
            }
            // fall through
          case 162: break;
          case 16:
            { return types.ARROBASE;
            }
            // fall through
          case 163: break;
          case 17:
            { return types.COLON;
            }
            // fall through
          case 164: break;
          case 18:
            { return types.EQ;
            }
            // fall through
          case 165: break;
          case 19:
            { return types.GT;
            }
            // fall through
          case 166: break;
          case 20:
            { return types.MINUS;
            }
            // fall through
          case 167: break;
          case 21:
            { return types.LT;
            }
            // fall through
          case 168: break;
          case 22:
            { return types.PIPE;
            }
            // fall through
          case 169: break;
          case 23:
            { return types.SLASH;
            }
            // fall through
          case 170: break;
          case 24:
            { return types.LBRACKET;
            }
            // fall through
          case 171: break;
          case 25:
            { return types.RBRACKET;
            }
            // fall through
          case 172: break;
          case 26:
            { return types.EXCLAMATION_MARK;
            }
            // fall through
          case 173: break;
          case 27:
            { return types.SEMI;
            }
            // fall through
          case 174: break;
          case 28:
            { return types.AMPERSAND;
            }
            // fall through
          case 175: break;
          case 29:
            { return types.COMMA;
            }
            // fall through
          case 176: break;
          case 30:
            { return types.RPAREN;
            }
            // fall through
          case 177: break;
          case 31:
            { return types.LBRACE;
            }
            // fall through
          case 178: break;
          case 32:
            { return types.RBRACE;
            }
            // fall through
          case 179: break;
          case 33:
            { return types.QUESTION_MARK;
            }
            // fall through
          case 180: break;
          case 34:
            { return types.DOLLAR;
            }
            // fall through
          case 181: break;
          case 35:
            { return types.TILDE;
            }
            // fall through
          case 182: break;
          case 36:
            { return types.CARRET;
            }
            // fall through
          case 183: break;
          case 37:
            { return types.PERCENT;
            }
            // fall through
          case 184: break;
          case 38:
            {
            }
            // fall through
          case 185: break;
          case 39:
            { yybegin(INITIAL); tokenEnd(); return types.STRING_VALUE;
            }
            // fall through
          case 186: break;
          case 40:
            { inCommentString = !inCommentString;
            }
            // fall through
          case 187: break;
          case 41:
            { return types.TYPE_ARGUMENT;
            }
            // fall through
          case 188: break;
          case 42:
            { return types.FLOAT_VALUE;
            }
            // fall through
          case 189: break;
          case 43:
            { return types.OF;
            }
            // fall through
          case 190: break;
          case 44:
            { return types.OR;
            }
            // fall through
          case 191: break;
          case 45:
            { return types.DOTDOT;
            }
            // fall through
          case 192: break;
          case 46:
            { return types.PLUSDOT;
            }
            // fall through
          case 193: break;
          case 47:
            { return types.STRING_CONCAT;
            }
            // fall through
          case 194: break;
          case 48:
            { return types.TO;
            }
            // fall through
          case 195: break;
          case 49:
            { return types.AS;
            }
            // fall through
          case 196: break;
          case 50:
            { return types.DO;
            }
            // fall through
          case 197: break;
          case 51:
            { return types.IF;
            }
            // fall through
          case 198: break;
          case 52:
            { return types.IN;
            }
            // fall through
          case 199: break;
          case 53:
            { return types.POLY_VARIANT;
            }
            // fall through
          case 200: break;
          case 54:
            { yybegin(IN_OCAML_ML_COMMENT); inCommentString = false; commentDepth = 1; tokenStart();
            }
            // fall through
          case 201: break;
          case 55:
            { return types.STARDOT;
            }
            // fall through
          case 202: break;
          case 56:
            { return types.SHARPSHARP;
            }
            // fall through
          case 203: break;
          case 57:
            { return types.ARROBASE_2;
            }
            // fall through
          case 204: break;
          case 58:
            { return types.SHORTCUT;
            }
            // fall through
          case 205: break;
          case 59:
            { return types.COLON_EQ;
            }
            // fall through
          case 206: break;
          case 60:
            { return types.COLON_GT;
            }
            // fall through
          case 207: break;
          case 61:
            { return types.EQEQ;
            }
            // fall through
          case 208: break;
          case 62:
            { return types.ARROW;
            }
            // fall through
          case 209: break;
          case 63:
            { return types.GT_OR_EQUAL;
            }
            // fall through
          case 210: break;
          case 64:
            { return types.MINUSDOT;
            }
            // fall through
          case 211: break;
          case 65:
            { return types.RIGHT_ARROW;
            }
            // fall through
          case 212: break;
          case 66:
            { return types.LT_OR_EQUAL;
            }
            // fall through
          case 213: break;
          case 67:
            { return types.OP_STRUCT_DIFF;
            }
            // fall through
          case 214: break;
          case 68:
            { return types.LEFT_ARROW;
            }
            // fall through
          case 215: break;
          case 69:
            { return types.TAG_LT_SLASH;
            }
            // fall through
          case 216: break;
          case 70:
            { return types.PIPE_FORWARD;
            }
            // fall through
          case 217: break;
          case 71:
            { return types.L_OR;
            }
            // fall through
          case 218: break;
          case 72:
            { return types.RARRAY;
            }
            // fall through
          case 219: break;
          case 73:
            { return types.SLASHDOT;
            }
            // fall through
          case 220: break;
          case 74:
            { return types.TAG_AUTO_CLOSE;
            }
            // fall through
          case 221: break;
          case 75:
            { return types.LARRAY;
            }
            // fall through
          case 222: break;
          case 76:
            { return types.NOT_EQ;
            }
            // fall through
          case 223: break;
          case 77:
            { return types.SEMISEMI;
            }
            // fall through
          case 224: break;
          case 78:
            { return types.L_AND;
            }
            // fall through
          case 225: break;
          case 79:
            { if (!inCommentString) commentDepth += 1;
            }
            // fall through
          case 226: break;
          case 80:
            { if (!inCommentString) { commentDepth -= 1; if(commentDepth == 0) { yybegin(INITIAL); tokenEnd(); return types.MULTI_COMMENT; } }
            }
            // fall through
          case 227: break;
          case 81:
            { return types.CHAR_VALUE;
            }
            // fall through
          case 228: break;
          case 82:
            { return types.FOR;
            }
            // fall through
          case 229: break;
          case 83:
            { return types.FUN;
            }
            // fall through
          case 230: break;
          case 84:
            { return types.DOTDOTDOT;
            }
            // fall through
          case 231: break;
          case 85:
            { return types.END;
            }
            // fall through
          case 232: break;
          case 86:
            { return types.PRI;
            }
            // fall through
          case 233: break;
          case 87:
            { return types.PUB;
            }
            // fall through
          case 234: break;
          case 88:
            { return types.NEW;
            }
            // fall through
          case 235: break;
          case 89:
            { return types.TRY;
            }
            // fall through
          case 236: break;
          case 90:
            { return types.REF;
            }
            // fall through
          case 237: break;
          case 91:
            { return types.REC;
            }
            // fall through
          case 238: break;
          case 92:
            { return types.RAW;
            }
            // fall through
          case 239: break;
          case 93:
            { return types.AND;
            }
            // fall through
          case 240: break;
          case 94:
            { return types.ASR;
            }
            // fall through
          case 241: break;
          case 95:
            { return types.SIG;
            }
            // fall through
          case 242: break;
          case 96:
            { return types.LOR;
            }
            // fall through
          case 243: break;
          case 97:
            { return types.LET;
            }
            // fall through
          case 244: break;
          case 98:
            { return types.LSR;
            }
            // fall through
          case 245: break;
          case 99:
            { return types.LSL;
            }
            // fall through
          case 246: break;
          case 100:
            { return types.MOD;
            }
            // fall through
          case 247: break;
          case 101:
            { return types.VAL;
            }
            // fall through
          case 248: break;
          case 102:
            { return types.DIRECTIVE_IF;
            }
            // fall through
          case 249: break;
          case 103:
            { return types.ARROBASE_3;
            }
            // fall through
          case 250: break;
          case 104:
            { return types.EQEQEQ;
            }
            // fall through
          case 251: break;
          case 105:
            { return types.NOT_EQEQ;
            }
            // fall through
          case 252: break;
          case 106:
            { return types.OPEN;
            }
            // fall through
          case 253: break;
          case 107:
            { return types.ELSE;
            }
            // fall through
          case 254: break;
          case 108:
            { return types.BOOL_VALUE;
            }
            // fall through
          case 255: break;
          case 109:
            { return types.THEN;
            }
            // fall through
          case 256: break;
          case 110:
            { return types.TYPE;
            }
            // fall through
          case 257: break;
          case 111:
            { return types.DONE;
            }
            // fall through
          case 258: break;
          case 112:
            { return types.LXOR;
            }
            // fall through
          case 259: break;
          case 113:
            { return types.LAND;
            }
            // fall through
          case 260: break;
          case 114:
            { return types.LAZY;
            }
            // fall through
          case 261: break;
          case 115:
            { return types.WITH;
            }
            // fall through
          case 262: break;
          case 116:
            { return types.WHEN;
            }
            // fall through
          case 263: break;
          case 117:
            { return types.UNIT;
            }
            // fall through
          case 264: break;
          case 118:
            { return types.NONE;
            }
            // fall through
          case 265: break;
          case 119:
            { return types.SOME;
            }
            // fall through
          case 266: break;
          case 120:
            { return types.DIRECTIVE_END;
            }
            // fall through
          case 267: break;
          case 121:
            { return types.BEGIN;
            }
            // fall through
          case 268: break;
          case 122:
            { return types.RAISE;
            }
            // fall through
          case 269: break;
          case 123:
            { return types.CLASS;
            }
            // fall through
          case 270: break;
          case 124:
            { return types.WHILE;
            }
            // fall through
          case 271: break;
          case 125:
            { return types.MATCH;
            }
            // fall through
          case 272: break;
          case 126:
            { return types.DIRECTIVE_ELSE;
            }
            // fall through
          case 273: break;
          case 127:
            { return types.DIRECTIVE_ELIF;
            }
            // fall through
          case 274: break;
          case 128:
            { return types.OBJECT;
            }
            // fall through
          case 275: break;
          case 129:
            { return types.OPTION;
            }
            // fall through
          case 276: break;
          case 130:
            { return types.NONREC;
            }
            // fall through
          case 277: break;
          case 131:
            { return types.ASSERT;
            }
            // fall through
          case 278: break;
          case 132:
            { return types.STRUCT;
            }
            // fall through
          case 279: break;
          case 133:
            { return types.DOWNTO;
            }
            // fall through
          case 280: break;
          case 134:
            { return types.MODULE;
            }
            // fall through
          case 281: break;
          case 135:
            { return types.METHOD;
            }
            // fall through
          case 282: break;
          case 136:
            { return types.DIRECTIVE_ENDIF;
            }
            // fall through
          case 283: break;
          case 137:
            { return types.FUNCTOR;
            }
            // fall through
          case 284: break;
          case 138:
            { return types.PRIVATE;
            }
            // fall through
          case 285: break;
          case 139:
            { return types.INCLUDE;
            }
            // fall through
          case 286: break;
          case 140:
            { return types.INHERIT;
            }
            // fall through
          case 287: break;
          case 141:
            { return types.MUTABLE;
            }
            // fall through
          case 288: break;
          case 142:
            { return types.VIRTUAL;
            }
            // fall through
          case 289: break;
          case 143:
            { return types.FUNCTION;
            }
            // fall through
          case 290: break;
          case 144:
            { return types.EXTERNAL;
            }
            // fall through
          case 291: break;
          case 145:
            { return types.EXCEPTION;
            }
            // fall through
          case 292: break;
          case 146:
            { return types.CONSTRAINT;
            }
            // fall through
          case 293: break;
          case 147:
            { return types.INITIALIZER;
            }
            // fall through
          case 294: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
