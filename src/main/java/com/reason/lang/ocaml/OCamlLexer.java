// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: OCaml.flex

package com.reason.lang.ocaml;

import com.intellij.psi.tree.IElementType;
import com.reason.lang.core.type.ORLangTypes;
import com.intellij.lexer.FlexLexer;

import static com.intellij.psi.TokenType.*;

@SuppressWarnings("ALL")

public class OCamlLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int INITIAL = 2;
  public static final int IN_STRING = 4;
  public static final int IN_OCAML_ML_COMMENT = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\2\27\4\30\2\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\2\41\1\43\1\41"+
    "\7\44\1\45\1\46\1\47\2\44\1\50\4\44\1\51"+
    "\2\44\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\72"+
    "\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107"+
    "\1\110\1\111\1\112\1\113\1\114\6\0\1\3\u01a2\0"+
    "\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\2\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\3\33\1\34\1\35\1\36\1\37"+
    "\1\40\23\41\1\42\1\43\1\44\1\45\1\46\1\2"+
    "\1\47\1\46\1\50\3\46\1\51\1\52\2\0\1\53"+
    "\2\0\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\2\0\3\23\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100"+
    "\1\101\1\102\2\33\1\103\1\104\1\41\1\105\3\41"+
    "\1\106\6\41\1\107\1\110\14\41\1\111\1\41\1\112"+
    "\7\41\1\113\7\41\1\114\1\115\1\116\1\117\1\0"+
    "\1\46\1\0\3\46\1\0\1\120\1\121\1\122\2\0"+
    "\1\123\2\124\3\0\1\124\1\54\1\125\1\66\1\23"+
    "\1\0\1\66\2\23\1\126\1\127\2\33\1\130\1\131"+
    "\7\41\1\132\3\41\1\133\1\134\5\41\1\135\1\136"+
    "\1\137\1\140\3\41\1\141\1\41\1\142\4\41\1\143"+
    "\1\144\1\41\1\145\1\146\1\147\1\150\3\41\1\151"+
    "\2\41\1\152\4\41\3\0\1\153\2\0\1\154\3\0"+
    "\1\66\1\23\1\155\1\156\4\41\1\157\1\41\1\160"+
    "\6\41\1\161\1\162\1\163\6\41\1\164\4\41\1\165"+
    "\1\166\1\167\1\170\1\41\1\171\1\41\1\172\1\0"+
    "\1\173\1\174\2\0\1\66\1\41\1\175\1\176\10\41"+
    "\1\177\7\41\1\200\2\41\1\201\1\202\1\203\1\41"+
    "\1\204\7\41\1\205\1\206\1\41\1\207\1\210\1\211"+
    "\1\41\1\212\5\41\1\213\1\214\1\215\1\41\1\216"+
    "\1\217\1\220\2\41\1\221\1\222\2\41\1\223\1\41"+
    "\1\224\1\41\1\225";

  private static int [] zzUnpackAction() {
    int [] result = new int[360];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\115\0\232\0\347\0\u0134\0\u0134\0\u0181\0\u01ce"+
    "\0\u0134\0\u021b\0\u0134\0\u0134\0\u0268\0\u02b5\0\u0302\0\u0134"+
    "\0\u034f\0\u039c\0\u0134\0\u03e9\0\u0436\0\u0483\0\u04d0\0\u051d"+
    "\0\u056a\0\u05b7\0\u0604\0\u0651\0\u069e\0\u0134\0\u06eb\0\u0738"+
    "\0\u0785\0\u07d2\0\u081f\0\u0134\0\u0134\0\u086c\0\u08b9\0\u0906"+
    "\0\u0953\0\u09a0\0\u09ed\0\u0a3a\0\u0a87\0\u086c\0\u0ad4\0\u0b21"+
    "\0\u0b6e\0\u0bbb\0\u0c08\0\u0c55\0\u0ca2\0\u0cef\0\u0d3c\0\u0d89"+
    "\0\u0dd6\0\u0e23\0\u0134\0\u0e70\0\u0134\0\u0134\0\u0134\0\u0ebd"+
    "\0\u0134\0\u0f0a\0\u0134\0\u0f57\0\u0fa4\0\u0ff1\0\u103e\0\u0134"+
    "\0\u108b\0\u10d8\0\u0134\0\u1125\0\u1172\0\u11bf\0\u0134\0\u0134"+
    "\0\u0134\0\u0134\0\u0134\0\u0134\0\u120c\0\u0134\0\u0134\0\u1259"+
    "\0\u12a6\0\u12f3\0\u0134\0\u1340\0\u138d\0\u0134\0\u0134\0\u0134"+
    "\0\u0134\0\u0134\0\u0134\0\u0134\0\u0134\0\u13da\0\u0134\0\u0134"+
    "\0\u1427\0\u1474\0\u14c1\0\u0134\0\u150e\0\u155b\0\u15a8\0\u15f5"+
    "\0\u1642\0\u168f\0\u16dc\0\u1729\0\u1776\0\u17c3\0\u1810\0\u185d"+
    "\0\u18aa\0\u086c\0\u18f7\0\u1944\0\u1991\0\u19de\0\u1a2b\0\u1a78"+
    "\0\u1ac5\0\u1b12\0\u1b5f\0\u1bac\0\u1bf9\0\u1c46\0\u1c93\0\u086c"+
    "\0\u1ce0\0\u086c\0\u1d2d\0\u1d7a\0\u1dc7\0\u1e14\0\u1e61\0\u1eae"+
    "\0\u1efb\0\u086c\0\u1f48\0\u1f95\0\u1fe2\0\u202f\0\u207c\0\u20c9"+
    "\0\u2116\0\u0134\0\u0134\0\u0134\0\u0134\0\u0ebd\0\u2163\0\u21b0"+
    "\0\u21fd\0\u224a\0\u2297\0\u22e4\0\u0134\0\u0134\0\u0134\0\u2331"+
    "\0\u237e\0\u0134\0\u0134\0\u1125\0\u23cb\0\u2418\0\u2465\0\u24b2"+
    "\0\u24b2\0\u0134\0\u0134\0\u24ff\0\u254c\0\u2599\0\u25e6\0\u2633"+
    "\0\u0134\0\u0134\0\u2680\0\u26cd\0\u086c\0\u086c\0\u271a\0\u2767"+
    "\0\u27b4\0\u2801\0\u284e\0\u289b\0\u28e8\0\u086c\0\u2935\0\u2982"+
    "\0\u29cf\0\u086c\0\u2a1c\0\u2a69\0\u2ab6\0\u2b03\0\u2b50\0\u2b9d"+
    "\0\u086c\0\u086c\0\u086c\0\u086c\0\u2bea\0\u2c37\0\u2c84\0\u2cd1"+
    "\0\u2d1e\0\u086c\0\u2d6b\0\u2db8\0\u2e05\0\u2e52\0\u2e9f\0\u086c"+
    "\0\u2eec\0\u086c\0\u086c\0\u086c\0\u086c\0\u2f39\0\u2f86\0\u2fd3"+
    "\0\u086c\0\u3020\0\u306d\0\u086c\0\u30ba\0\u3107\0\u3154\0\u31a1"+
    "\0\u31ee\0\u323b\0\u3288\0\u0134\0\u32d5\0\u3322\0\u336f\0\u33bc"+
    "\0\u3409\0\u3456\0\u34a3\0\u12f3\0\u0738\0\u0738\0\u34f0\0\u353d"+
    "\0\u358a\0\u35d7\0\u086c\0\u3624\0\u086c\0\u3671\0\u36be\0\u370b"+
    "\0\u3758\0\u37a5\0\u37f2\0\u086c\0\u086c\0\u086c\0\u383f\0\u388c"+
    "\0\u38d9\0\u3926\0\u3973\0\u39c0\0\u086c\0\u3a0d\0\u3a5a\0\u3aa7"+
    "\0\u3af4\0\u086c\0\u086c\0\u086c\0\u086c\0\u3b41\0\u086c\0\u3b8e"+
    "\0\u086c\0\u3bdb\0\u0134\0\u0134\0\u3c28\0\u3c75\0\u12f3\0\u3cc2"+
    "\0\u086c\0\u086c\0\u3d0f\0\u3d5c\0\u3da9\0\u3df6\0\u3e43\0\u3e90"+
    "\0\u3edd\0\u3f2a\0\u086c\0\u3f77\0\u3fc4\0\u4011\0\u405e\0\u40ab"+
    "\0\u40f8\0\u4145\0\u086c\0\u4192\0\u41df\0\u086c\0\u0134\0\u086c"+
    "\0\u422c\0\u086c\0\u4279\0\u42c6\0\u4313\0\u4360\0\u43ad\0\u43fa"+
    "\0\u4447\0\u086c\0\u086c\0\u4494\0\u086c\0\u086c\0\u086c\0\u44e1"+
    "\0\u086c\0\u452e\0\u457b\0\u45c8\0\u4615\0\u4662\0\u086c\0\u086c"+
    "\0\u086c\0\u46af\0\u086c\0\u086c\0\u086c\0\u46fc\0\u4749\0\u086c"+
    "\0\u086c\0\u4796\0\u47e3\0\u086c\0\u4830\0\u086c\0\u487d\0\u086c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[360];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\115\5\1\6\2\7\1\6\2\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\4\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\4\40\1\41\2\40"+
    "\1\42\1\40\1\43\1\6\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\2\56\1\57"+
    "\2\56\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\3\56\1\73\1\74\1\75"+
    "\1\76\3\77\2\6\1\100\1\77\1\101\43\77\1\102"+
    "\44\77\2\6\1\100\1\77\1\103\4\77\1\104\1\105"+
    "\1\77\1\106\75\77\116\0\2\7\1\0\2\7\144\0"+
    "\1\107\67\0\1\110\53\0\1\111\3\0\1\112\37\0"+
    "\1\113\101\0\2\114\4\0\45\114\1\115\2\114\1\116"+
    "\1\114\31\116\4\114\17\0\1\117\120\0\1\120\111\0"+
    "\1\121\2\0\1\122\114\0\1\123\12\0\1\124\101\0"+
    "\1\125\114\0\1\126\12\0\1\127\101\0\1\130\1\0"+
    "\5\30\10\0\1\131\1\132\2\133\1\134\2\133\1\135"+
    "\4\0\1\30\2\0\1\131\2\0\1\132\1\0\10\133"+
    "\1\134\7\133\1\135\2\133\27\0\1\130\1\0\5\30"+
    "\11\0\1\132\6\133\4\0\1\30\5\0\1\132\1\0"+
    "\23\133\36\0\1\136\2\0\1\137\1\140\111\0\1\141"+
    "\103\0\1\142\1\0\1\143\10\0\1\144\1\145\113\0"+
    "\1\146\1\147\113\0\1\150\117\0\1\151\70\0\1\40"+
    "\10\0\5\40\7\0\11\40\4\0\1\40\1\0\31\40"+
    "\20\0\1\40\10\0\5\40\7\0\11\40\4\0\1\40"+
    "\1\0\16\40\1\152\12\40\20\0\1\40\10\0\5\40"+
    "\7\0\11\40\4\0\1\40\1\0\16\40\1\153\12\40"+
    "\116\0\1\154\16\0\1\56\10\0\5\56\7\0\11\56"+
    "\4\0\1\56\1\0\31\56\45\0\11\155\4\0\1\155"+
    "\1\0\31\155\20\0\1\56\10\0\5\56\7\0\11\56"+
    "\4\0\1\56\1\0\15\56\1\156\3\56\1\157\7\56"+
    "\20\0\1\56\10\0\5\56\7\0\11\56\4\0\1\56"+
    "\1\0\4\56\1\160\24\56\20\0\1\56\10\0\5\56"+
    "\7\0\11\56\4\0\1\56\1\0\13\56\1\161\2\56"+
    "\1\162\12\56\20\0\1\56\10\0\5\56\7\0\11\56"+
    "\4\0\1\56\1\0\16\56\1\163\12\56\20\0\1\56"+
    "\10\0\5\56\7\0\11\56\4\0\1\56\1\0\13\56"+
    "\1\164\1\56\1\165\10\56\1\166\2\56\20\0\1\56"+
    "\10\0\5\56\7\0\11\56\4\0\1\56\1\0\1\167"+
    "\15\56\1\170\4\56\1\171\5\56\20\0\1\56\10\0"+
    "\5\56\7\0\11\56\4\0\1\56\1\0\5\56\1\172"+
    "\7\56\1\173\13\56\20\0\1\56\10\0\5\56\7\0"+
    "\11\56\4\0\1\56\1\0\1\174\3\56\1\175\11\56"+
    "\1\176\2\56\1\177\4\56\1\200\2\56\20\0\1\56"+
    "\10\0\5\56\7\0\11\56\4\0\1\56\1\0\1\201"+
    "\3\56\1\202\11\56\1\203\4\56\1\204\5\56\20\0"+
    "\1\56\10\0\5\56\7\0\11\56\4\0\1\56\1\0"+
    "\4\56\1\205\11\56\1\206\12\56\20\0\1\56\10\0"+
    "\5\56\7\0\11\56\4\0\1\56\1\0\1\56\1\207"+
    "\3\56\1\210\11\56\1\211\1\212\10\56\20\0\1\56"+
    "\10\0\5\56\7\0\11\56\4\0\1\56\1\0\20\56"+
    "\1\213\2\56\1\214\5\56\20\0\1\56\10\0\5\56"+
    "\7\0\11\56\4\0\1\56\1\0\1\215\3\56\1\216"+
    "\24\56\20\0\1\56\10\0\5\56\7\0\11\56\4\0"+
    "\1\56\1\0\10\56\1\217\11\56\1\220\6\56\20\0"+
    "\1\56\10\0\5\56\7\0\11\56\4\0\1\56\1\0"+
    "\7\56\1\221\6\56\1\222\1\56\1\223\6\56\1\224"+
    "\1\56\20\0\1\56\10\0\5\56\7\0\11\56\4\0"+
    "\1\56\1\0\15\56\1\225\13\56\20\0\1\56\10\0"+
    "\5\56\7\0\11\56\4\0\1\56\1\0\1\226\7\56"+
    "\1\227\20\56\20\0\1\56\10\0\5\56\7\0\11\56"+
    "\4\0\1\56\1\0\7\56\1\230\1\231\20\56\27\0"+
    "\1\232\12\0\1\233\15\0\1\234\35\0\1\235\4\0"+
    "\1\77\2\0\1\236\107\0\2\77\1\237\2\0\1\240"+
    "\17\77\5\241\44\77\1\242\7\77\1\243\6\77\2\244"+
    "\4\0\107\244\17\0\1\245\113\0\1\246\133\0\1\247"+
    "\152\0\1\250\1\0\1\251\104\0\1\252\43\0\1\253"+
    "\107\0\1\114\4\0\1\254\10\0\5\255\21\0\1\114"+
    "\5\0\1\114\13\0\1\114\1\256\1\0\1\114\1\0"+
    "\1\114\3\0\1\257\22\0\1\260\10\0\5\261\7\0"+
    "\11\261\4\0\1\261\1\0\31\261\27\0\1\262\116\0"+
    "\5\130\11\0\1\132\6\263\4\0\1\130\5\0\1\132"+
    "\1\0\23\263\31\0\2\264\106\0\1\265\1\0\1\265"+
    "\2\0\5\266\110\0\4\267\111\0\5\270\7\0\3\270"+
    "\14\0\6\270\64\0\1\271\117\0\1\272\70\0\1\40"+
    "\10\0\5\40\7\0\11\40\4\0\1\40\1\0\15\40"+
    "\1\273\13\40\20\0\1\40\10\0\5\40\7\0\11\40"+
    "\4\0\1\40\1\0\14\40\1\274\14\40\20\0\1\155"+
    "\10\0\5\155\7\0\11\155\4\0\1\155\1\0\31\155"+
    "\20\0\1\56\10\0\5\56\7\0\11\56\4\0\1\56"+
    "\1\0\3\56\1\275\25\56\20\0\1\56\10\0\5\56"+
    "\7\0\11\56\4\0\1\56\1\0\20\56\1\276\1\277"+
    "\7\56\20\0\1\56\10\0\5\56\7\0\11\56\4\0"+
    "\1\56\1\0\6\56\1\300\22\56\20\0\1\56\10\0"+
    "\5\56\7\0\11\56\4\0\1\56\1\0\1\301\30\56"+
    "\20\0\1\56\10\0\5\56\7\0\11\56\4\0\1\56"+
    "\1\0\15\56\1\302\13\56\20\0\1\56\10\0\5\56"+
    "\7\0\11\56\4\0\1\56\1\0\15\56\1\303\7\56"+
    "\1\304\3\56\20\0\1\56\10\0\5\56\7\0\11\56"+
    "\4\0\1\56\1\0\21\56\1\305\7\56\20\0\1\56"+
    "\10\0\5\56\7\0\11\56\4\0\1\56\1\0\3\56"+
    "\1\306\25\56\20\0\1\56\10\0\5\56\7\0\11\56"+
    "\4\0\1\56\1\0\2\56\1\307\17\56\1\310\6\56"+
    "\20\0\1\56\10\0\5\56\7\0\11\56\4\0\1\56"+
    "\1\0\13\56\1\311\15\56\20\0\1\56\10\0\5\56"+
    "\7\0\11\56\4\0\1\56\1\0\20\56\1\312\10\56"+
    "\20\0\1\56\10\0\5\56\7\0\11\56\4\0\1\56"+
    "\1\0\15\56\1\313\13\56\20\0\1\56\10\0\5\56"+
    "\7\0\11\56\4\0\1\56\1\0\2\56\1\314\4\56"+
    "\1\315\1\316\20\56\20\0\1\56\10\0\5\56\7\0"+
    "\11\56\4\0\1\56\1\0\15\56\1\317\12\56\1\320"+
    "\20\0\1\56\10\0\5\56\7\0\11\56\4\0\1\56"+
    "\1\0\22\56\1\321\6\56\20\0\1\56\10\0\5\56"+
    "\7\0\11\56\4\0\1\56\1\0\20\56\1\322\10\56"+
    "\20\0\1\56\10\0\5\56\7\0\11\56\4\0\1\56"+
    "\1\0\13\56\1\323\4\56\1\324\10\56\20\0\1\56"+
    "\10\0\5\56\7\0\11\56\4\0\1\56\1\0\16\56"+
    "\1\325\12\56\20\0\1\56\10\0\5\56\7\0\11\56"+
    "\4\0\1\56\1\0\22\56\1\326\6\56\20\0\1\56"+
    "\10\0\5\56\7\0\11\56\4\0\1\56\1\0\22\56"+
    "\1\327\6\56\20\0\1\56\10\0\5\56\7\0\11\56"+
    "\4\0\1\56\1\0\3\56\1\330\25\56\20\0\1\56"+
    "\10\0\5\56\7\0\11\56\4\0\1\56\1\0\22\56"+
    "\1\331\6\56\20\0\1\56\10\0\5\56\7\0\11\56"+
    "\4\0\1\56\1\0\25\56\1\332\3\56\20\0\1\56"+
    "\10\0\5\56\7\0\11\56\4\0\1\56\1\0\15\56"+
    "\1\333\13\56\20\0\1\56\10\0\5\56\7\0\11\56"+
    "\4\0\1\56\1\0\11\56\1\334\17\56\20\0\1\56"+
    "\10\0\5\56\7\0\11\56\4\0\1\56\1\0\4\56"+
    "\1\335\15\56\1\336\6\56\20\0\1\56\10\0\5\56"+
    "\7\0\11\56\4\0\1\56\1\0\10\56\1\337\20\56"+
    "\20\0\1\56\10\0\5\56\7\0\11\56\4\0\1\56"+
    "\1\0\1\56\1\340\27\56\20\0\1\56\10\0\5\56"+
    "\7\0\11\56\4\0\1\56\1\0\10\56\1\341\14\56"+
    "\1\342\3\56\20\0\1\56\10\0\5\56\7\0\11\56"+
    "\4\0\1\56\1\0\2\56\1\343\2\56\1\344\23\56"+
    "\20\0\1\56\10\0\5\56\7\0\11\56\4\0\1\56"+
    "\1\0\6\56\1\345\22\56\20\0\1\56\10\0\5\56"+
    "\7\0\11\56\4\0\1\56\1\0\20\56\1\346\10\56"+
    "\20\0\1\56\10\0\5\56\7\0\11\56\4\0\1\56"+
    "\1\0\4\56\1\347\24\56\20\0\1\56\10\0\5\56"+
    "\7\0\11\56\4\0\1\56\1\0\23\56\1\350\3\56"+
    "\1\351\1\56\20\0\1\56\10\0\5\56\7\0\11\56"+
    "\4\0\1\56\1\0\17\56\1\352\11\56\20\0\1\56"+
    "\10\0\5\56\7\0\11\56\4\0\1\56\1\0\10\56"+
    "\1\353\20\56\20\0\1\56\10\0\5\56\7\0\11\56"+
    "\4\0\1\56\1\0\13\56\1\354\15\56\20\0\1\56"+
    "\10\0\5\56\7\0\11\56\4\0\1\56\1\0\20\56"+
    "\1\355\10\56\20\0\1\56\10\0\5\56\7\0\11\56"+
    "\4\0\1\56\1\0\4\56\1\356\3\56\1\357\20\56"+
    "\20\0\1\56\10\0\5\56\7\0\11\56\4\0\1\56"+
    "\1\0\22\56\1\360\6\56\5\0\1\237\115\0\1\237"+
    "\2\0\1\240\134\0\5\361\110\0\3\362\112\0\5\363"+
    "\7\0\3\363\14\0\6\363\43\0\1\364\170\0\1\365"+
    "\10\0\1\366\76\0\1\367\56\0\5\370\110\0\3\371"+
    "\112\0\5\372\7\0\3\372\14\0\6\372\43\0\1\261"+
    "\10\0\5\261\7\0\11\261\4\0\1\261\1\0\31\261"+
    "\31\0\2\264\15\0\6\133\4\0\1\264\7\0\23\133"+
    "\31\0\5\266\110\0\5\266\12\0\6\263\4\0\1\266"+
    "\7\0\23\263\31\0\4\267\13\0\6\133\4\0\1\267"+
    "\7\0\23\133\27\0\1\373\1\0\5\270\7\0\3\270"+
    "\3\133\1\374\2\133\4\0\1\270\1\0\6\270\11\133"+
    "\1\374\11\133\20\0\1\40\10\0\5\40\7\0\11\40"+
    "\4\0\1\40\1\0\4\40\1\375\24\40\20\0\1\40"+
    "\10\0\5\40\7\0\11\40\4\0\1\40\1\0\4\40"+
    "\1\376\24\40\20\0\1\56\10\0\5\56\7\0\11\56"+
    "\4\0\1\56\1\0\4\56\1\377\24\56\20\0\1\56"+
    "\10\0\5\56\7\0\11\56\4\0\1\56\1\0\10\56"+
    "\1\u0100\20\56\20\0\1\56\10\0\5\56\7\0\11\56"+
    "\4\0\1\56\1\0\21\56\1\u0101\7\56\20\0\1\56"+
    "\10\0\5\56\7\0\11\56\4\0\1\56\1\0\21\56"+
    "\1\u0102\7\56\20\0\1\56\10\0\5\56\7\0\11\56"+
    "\4\0\1\56\1\0\4\56\1\u0103\24\56\20\0\1\56"+
    "\10\0\5\56\7\0\11\56\4\0\1\56\1\0\15\56"+
    "\1\u0104\13\56\20\0\1\56\10\0\5\56\7\0\11\56"+
    "\4\0\1\56\1\0\4\56\1\u0105\24\56\20\0\1\56"+
    "\10\0\5\56\7\0\11\56\4\0\1\56\1\0\4\56"+
    "\1\u0106\24\56\20\0\1\56\10\0\5\56\7\0\11\56"+
    "\4\0\1\56\1\0\4\56\1\u0107\24\56\20\0\1\56"+
    "\10\0\5\56\7\0\11\56\4\0\1\56\1\0\21\56"+
    "\1\350\7\56\20\0\1\56\10\0\5\56\7\0\11\56"+
    "\4\0\1\56\1\0\2\56\1\u0108\26\56\20\0\1\56"+
    "\10\0\5\56\7\0\11\56\4\0\1\56\1\0\13\56"+
    "\1\u0109\15\56\20\0\1\56\10\0\5\56\7\0\11\56"+
    "\4\0\1\56\1\0\4\56\1\u010a\24\56\20\0\1\56"+
    "\10\0\5\56\7\0\11\56\4\0\1\56\1\0\22\56"+
    "\1\u010b\6\56\20\0\1\56\10\0\5\56\7\0\11\56"+
    "\4\0\1\56\1\0\3\56\1\u010c\25\56\20\0\1\56"+
    "\10\0\5\56\7\0\11\56\4\0\1\56\1\0\27\56"+
    "\1\u010d\1\56\20\0\1\56\10\0\5\56\7\0\11\56"+
    "\4\0\1\56\1\0\20\56\1\u010e\10\56\20\0\1\56"+
    "\10\0\5\56\7\0\11\56\4\0\1\56\1\0\2\56"+
    "\1\u010f\26\56\20\0\1\56\10\0\5\56\7\0\11\56"+
    "\4\0\1\56\1\0\7\56\1\u0110\21\56\20\0\1\56"+
    "\10\0\5\56\7\0\11\56\4\0\1\56\1\0\23\56"+
    "\1\u0111\5\56\20\0\1\56\10\0\5\56\7\0\11\56"+
    "\4\0\1\56\1\0\1\u0112\30\56\20\0\1\56\10\0"+
    "\5\56\7\0\11\56\4\0\1\56\1\0\20\56\1\u0113"+
    "\10\56\20\0\1\56\10\0\5\56\7\0\11\56\4\0"+
    "\1\56\1\0\4\56\1\u0114\24\56\20\0\1\56\10\0"+
    "\5\56\7\0\11\56\4\0\1\56\1\0\15\56\1\u0115"+
    "\13\56\20\0\1\56\10\0\5\56\7\0\11\56\4\0"+
    "\1\56\1\0\10\56\1\u0116\20\56\20\0\1\56\10\0"+
    "\5\56\7\0\11\56\4\0\1\56\1\0\24\56\1\u0117"+
    "\4\56\20\0\1\56\10\0\5\56\7\0\11\56\4\0"+
    "\1\56\1\0\21\56\1\u0118\7\56\20\0\1\56\10\0"+
    "\5\56\7\0\11\56\4\0\1\56\1\0\23\56\1\u0119"+
    "\5\56\20\0\1\56\10\0\5\56\7\0\11\56\4\0"+
    "\1\56\1\0\15\56\1\u011a\13\56\20\0\1\56\10\0"+
    "\5\56\7\0\11\56\4\0\1\56\1\0\4\56\1\u011b"+
    "\24\56\20\0\1\56\10\0\5\56\7\0\11\56\4\0"+
    "\1\56\1\0\4\56\1\u011c\24\56\20\0\1\56\10\0"+
    "\5\56\7\0\11\56\4\0\1\56\1\0\22\56\1\u011d"+
    "\6\56\20\0\1\56\10\0\5\56\7\0\11\56\4\0"+
    "\1\56\1\0\22\56\1\u011e\6\56\20\0\1\56\10\0"+
    "\5\56\7\0\11\56\4\0\1\56\1\0\15\56\1\u011f"+
    "\13\56\20\0\1\56\10\0\5\56\7\0\11\56\4\0"+
    "\1\56\1\0\13\56\1\u0120\15\56\20\0\1\56\10\0"+
    "\5\56\7\0\11\56\4\0\1\56\1\0\7\56\1\u0121"+
    "\21\56\31\0\5\77\110\0\4\u0122\111\0\5\77\7\0"+
    "\3\77\14\0\6\77\114\0\1\u0123\113\0\1\u0124\120\0"+
    "\1\u0125\51\0\5\114\110\0\4\u0126\111\0\5\114\7\0"+
    "\3\114\14\0\6\114\54\0\5\373\7\0\3\373\3\263"+
    "\1\u0127\2\263\4\0\1\373\1\0\6\373\11\263\1\u0127"+
    "\11\263\20\0\1\56\10\0\5\56\7\0\11\56\4\0"+
    "\1\56\1\0\20\56\1\u0128\10\56\20\0\1\56\10\0"+
    "\5\56\7\0\11\56\4\0\1\56\1\0\15\56\1\u0129"+
    "\13\56\20\0\1\56\10\0\5\56\7\0\11\56\4\0"+
    "\1\56\1\0\21\56\1\u012a\7\56\20\0\1\56\10\0"+
    "\5\56\7\0\11\56\4\0\1\56\1\0\22\56\1\u012b"+
    "\6\56\20\0\1\56\10\0\5\56\7\0\11\56\4\0"+
    "\1\56\1\0\22\56\1\u012c\6\56\20\0\1\56\10\0"+
    "\5\56\7\0\11\56\4\0\1\56\1\0\17\56\1\u012d"+
    "\11\56\20\0\1\56\10\0\5\56\7\0\11\56\4\0"+
    "\1\56\1\0\20\56\1\u012e\10\56\20\0\1\56\10\0"+
    "\5\56\7\0\11\56\4\0\1\56\1\0\22\56\1\u012f"+
    "\6\56\20\0\1\56\10\0\5\56\7\0\11\56\4\0"+
    "\1\56\1\0\23\56\1\u0130\5\56\20\0\1\56\10\0"+
    "\5\56\7\0\11\56\4\0\1\56\1\0\20\56\1\u0131"+
    "\10\56\20\0\1\56\10\0\5\56\7\0\11\56\4\0"+
    "\1\56\1\0\10\56\1\u0132\20\56\20\0\1\56\10\0"+
    "\5\56\7\0\11\56\4\0\1\56\1\0\7\56\1\u0133"+
    "\21\56\20\0\1\56\10\0\5\56\7\0\11\56\4\0"+
    "\1\56\1\0\16\56\1\u0134\12\56\20\0\1\56\10\0"+
    "\5\56\7\0\11\56\4\0\1\56\1\0\13\56\1\u0135"+
    "\15\56\20\0\1\56\10\0\5\56\7\0\11\56\4\0"+
    "\1\56\1\0\1\56\1\u0136\27\56\20\0\1\56\10\0"+
    "\5\56\7\0\11\56\4\0\1\56\1\0\4\56\1\u0137"+
    "\24\56\20\0\1\56\10\0\5\56\7\0\11\56\4\0"+
    "\1\56\1\0\2\56\1\u0138\26\56\20\0\1\56\10\0"+
    "\5\56\7\0\11\56\4\0\1\56\1\0\16\56\1\u0139"+
    "\12\56\20\0\1\56\10\0\5\56\7\0\11\56\4\0"+
    "\1\56\1\0\1\u013a\30\56\20\0\1\56\10\0\5\56"+
    "\7\0\11\56\4\0\1\56\1\0\4\56\1\u013b\24\56"+
    "\20\0\1\56\10\0\5\56\7\0\11\56\4\0\1\56"+
    "\1\0\2\56\1\u013c\26\56\20\0\1\56\10\0\5\56"+
    "\7\0\11\56\4\0\1\56\1\0\23\56\1\u013d\5\56"+
    "\20\0\1\56\10\0\5\56\7\0\11\56\4\0\1\56"+
    "\1\0\4\56\1\u013e\24\56\31\0\4\77\151\0\1\u013f"+
    "\54\0\4\114\100\0\1\56\10\0\5\56\7\0\11\56"+
    "\4\0\1\56\1\0\22\56\1\u0140\6\56\20\0\1\56"+
    "\10\0\5\56\7\0\11\56\4\0\1\56\1\0\20\56"+
    "\1\u0141\10\56\20\0\1\56\10\0\5\56\7\0\11\56"+
    "\4\0\1\56\1\0\16\56\1\u0142\12\56\20\0\1\56"+
    "\10\0\5\56\7\0\11\56\4\0\1\56\1\0\22\56"+
    "\1\u0143\6\56\20\0\1\56\10\0\5\56\7\0\11\56"+
    "\4\0\1\56\1\0\15\56\1\u0144\13\56\20\0\1\56"+
    "\10\0\5\56\7\0\11\56\4\0\1\56\1\0\10\56"+
    "\1\u0145\5\56\1\u0146\12\56\20\0\1\56\10\0\5\56"+
    "\7\0\11\56\4\0\1\56\1\0\3\56\1\u0147\25\56"+
    "\20\0\1\56\10\0\5\56\7\0\11\56\4\0\1\56"+
    "\1\0\10\56\1\u0148\20\56\20\0\1\56\10\0\5\56"+
    "\7\0\11\56\4\0\1\56\1\0\1\u0149\30\56\20\0"+
    "\1\56\10\0\5\56\7\0\11\56\4\0\1\56\1\0"+
    "\3\56\1\u014a\25\56\20\0\1\56\10\0\5\56\7\0"+
    "\11\56\4\0\1\56\1\0\4\56\1\u014b\24\56\20\0"+
    "\1\56\10\0\5\56\7\0\11\56\4\0\1\56\1\0"+
    "\13\56\1\u014c\15\56\20\0\1\56\10\0\5\56\7\0"+
    "\11\56\4\0\1\56\1\0\2\56\1\u014d\26\56\20\0"+
    "\1\56\10\0\5\56\7\0\11\56\4\0\1\56\1\0"+
    "\22\56\1\u014e\6\56\20\0\1\56\10\0\5\56\7\0"+
    "\11\56\4\0\1\56\1\0\15\56\1\u014f\13\56\20\0"+
    "\1\56\10\0\5\56\7\0\11\56\4\0\1\56\1\0"+
    "\22\56\1\u0150\6\56\20\0\1\56\10\0\5\56\7\0"+
    "\11\56\4\0\1\56\1\0\22\56\1\u0151\6\56\20\0"+
    "\1\56\10\0\5\56\7\0\11\56\4\0\1\56\1\0"+
    "\1\u0152\30\56\20\0\1\56\10\0\5\56\7\0\11\56"+
    "\4\0\1\56\1\0\1\u0153\30\56\20\0\1\56\10\0"+
    "\5\56\7\0\11\56\4\0\1\56\1\0\10\56\1\u0154"+
    "\20\56\20\0\1\56\10\0\5\56\7\0\11\56\4\0"+
    "\1\56\1\0\1\u0155\30\56\20\0\1\56\10\0\5\56"+
    "\7\0\11\56\4\0\1\56\1\0\16\56\1\u0156\12\56"+
    "\20\0\1\56\10\0\5\56\7\0\11\56\4\0\1\56"+
    "\1\0\20\56\1\u0157\10\56\20\0\1\56\10\0\5\56"+
    "\7\0\11\56\4\0\1\56\1\0\4\56\1\u0158\24\56"+
    "\20\0\1\56\10\0\5\56\7\0\11\56\4\0\1\56"+
    "\1\0\22\56\1\u0159\6\56\20\0\1\56\10\0\5\56"+
    "\7\0\11\56\4\0\1\56\1\0\13\56\1\u015a\15\56"+
    "\20\0\1\56\10\0\5\56\7\0\11\56\4\0\1\56"+
    "\1\0\4\56\1\u015b\24\56\20\0\1\56\10\0\5\56"+
    "\7\0\11\56\4\0\1\56\1\0\4\56\1\u015c\24\56"+
    "\20\0\1\56\10\0\5\56\7\0\11\56\4\0\1\56"+
    "\1\0\13\56\1\u015d\15\56\20\0\1\56\10\0\5\56"+
    "\7\0\11\56\4\0\1\56\1\0\10\56\1\u015e\20\56"+
    "\20\0\1\56\10\0\5\56\7\0\11\56\4\0\1\56"+
    "\1\0\16\56\1\u015f\12\56\20\0\1\56\10\0\5\56"+
    "\7\0\11\56\4\0\1\56\1\0\13\56\1\u0160\15\56"+
    "\20\0\1\56\10\0\5\56\7\0\11\56\4\0\1\56"+
    "\1\0\15\56\1\u0161\13\56\20\0\1\56\10\0\5\56"+
    "\7\0\11\56\4\0\1\56\1\0\10\56\1\u0162\20\56"+
    "\20\0\1\56\10\0\5\56\7\0\11\56\4\0\1\56"+
    "\1\0\15\56\1\u0163\13\56\20\0\1\56\10\0\5\56"+
    "\7\0\11\56\4\0\1\56\1\0\15\56\1\u0164\13\56"+
    "\20\0\1\56\10\0\5\56\7\0\11\56\4\0\1\56"+
    "\1\0\30\56\1\u0165\20\0\1\56\10\0\5\56\7\0"+
    "\11\56\4\0\1\56\1\0\22\56\1\u0166\6\56\20\0"+
    "\1\56\10\0\5\56\7\0\11\56\4\0\1\56\1\0"+
    "\4\56\1\u0167\24\56\20\0\1\56\10\0\5\56\7\0"+
    "\11\56\4\0\1\56\1\0\20\56\1\u0168\10\56\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[18634];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\2\11\2\1\1\11\1\1\2\11\3\1\1\11"+
    "\2\1\1\11\12\1\1\11\5\1\2\11\25\1\1\11"+
    "\1\1\3\11\1\1\1\11\1\1\1\11\4\1\1\11"+
    "\2\0\1\11\2\0\1\1\6\11\1\1\2\11\1\1"+
    "\2\0\1\11\2\1\10\11\1\1\2\11\3\1\1\11"+
    "\55\1\4\11\1\0\1\1\1\0\3\1\1\0\3\11"+
    "\2\0\2\11\1\1\3\0\2\1\2\11\1\1\1\0"+
    "\3\1\2\11\66\1\3\0\1\11\2\0\1\1\3\0"+
    "\47\1\1\0\2\11\2\0\30\1\1\11\51\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[360];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    public OCamlLexer() {
        this.types = OclTypes.INSTANCE;
    }

    private ORLangTypes types;
    private int tokenStartIndex;
    private CharSequence quotedStringId;
    private int commentDepth;
    private boolean inCommentString = false;
    private boolean inCommentChar = false;

    // Store the start index of a token
    private void tokenStart() {
        tokenStartIndex = zzStartRead;
    }

    // Set the start index of the token to the stored index
    private void tokenEnd() {
        zzStartRead = tokenStartIndex;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public OCamlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case IN_STRING: {
              yybegin(INITIAL); tokenEnd(); return types.STRING_VALUE;
            }  // fall though
            case 361: break;
            case IN_OCAML_ML_COMMENT: {
              yybegin(INITIAL); tokenEnd(); return types.MULTI_COMMENT;
            }  // fall though
            case 362: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yybegin(INITIAL); yypushback(1);
            }
          // fall through
          case 150: break;
          case 2:
            { return BAD_CHARACTER;
            }
          // fall through
          case 151: break;
          case 3:
            { return WHITE_SPACE;
            }
          // fall through
          case 152: break;
          case 4:
            { return types.EXCLAMATION_MARK;
            }
          // fall through
          case 153: break;
          case 5:
            { yybegin(IN_STRING); tokenStart();
            }
          // fall through
          case 154: break;
          case 6:
            { return types.SHARP;
            }
          // fall through
          case 155: break;
          case 7:
            { return types.DOLLAR;
            }
          // fall through
          case 156: break;
          case 8:
            { return types.PERCENT;
            }
          // fall through
          case 157: break;
          case 9:
            { return types.AMPERSAND;
            }
          // fall through
          case 158: break;
          case 10:
            { return types.SINGLE_QUOTE;
            }
          // fall through
          case 159: break;
          case 11:
            { return types.LPAREN;
            }
          // fall through
          case 160: break;
          case 12:
            { return types.RPAREN;
            }
          // fall through
          case 161: break;
          case 13:
            { return types.STAR;
            }
          // fall through
          case 162: break;
          case 14:
            { return types.PLUS;
            }
          // fall through
          case 163: break;
          case 15:
            { return types.COMMA;
            }
          // fall through
          case 164: break;
          case 16:
            { return types.MINUS;
            }
          // fall through
          case 165: break;
          case 17:
            { return types.DOT;
            }
          // fall through
          case 166: break;
          case 18:
            { return types.SLASH;
            }
          // fall through
          case 167: break;
          case 19:
            { return types.INT_VALUE;
            }
          // fall through
          case 168: break;
          case 20:
            { return types.COLON;
            }
          // fall through
          case 169: break;
          case 21:
            { return types.SEMI;
            }
          // fall through
          case 170: break;
          case 22:
            { return types.LT;
            }
          // fall through
          case 171: break;
          case 23:
            { return types.EQ;
            }
          // fall through
          case 172: break;
          case 24:
            { return types.GT;
            }
          // fall through
          case 173: break;
          case 25:
            { return types.QUESTION_MARK;
            }
          // fall through
          case 174: break;
          case 26:
            { return types.ARROBASE;
            }
          // fall through
          case 175: break;
          case 27:
            { return types.UIDENT;
            }
          // fall through
          case 176: break;
          case 28:
            { return types.LBRACKET;
            }
          // fall through
          case 177: break;
          case 29:
            { return types.RBRACKET;
            }
          // fall through
          case 178: break;
          case 30:
            { return types.CARRET;
            }
          // fall through
          case 179: break;
          case 31:
            { return types.UNDERSCORE;
            }
          // fall through
          case 180: break;
          case 32:
            { return types.BACKTICK;
            }
          // fall through
          case 181: break;
          case 33:
            { return types.LIDENT;
            }
          // fall through
          case 182: break;
          case 34:
            { return types.LBRACE;
            }
          // fall through
          case 183: break;
          case 35:
            { return types.PIPE;
            }
          // fall through
          case 184: break;
          case 36:
            { return types.RBRACE;
            }
          // fall through
          case 185: break;
          case 37:
            { return types.TILDE;
            }
          // fall through
          case 186: break;
          case 38:
            {
            }
          // fall through
          case 187: break;
          case 39:
            { yybegin(INITIAL); tokenEnd(); return types.STRING_VALUE;
            }
          // fall through
          case 188: break;
          case 40:
            { inCommentString = !inCommentString;
            }
          // fall through
          case 189: break;
          case 41:
            { return types.NOT_EQ;
            }
          // fall through
          case 190: break;
          case 42:
            { return types.SHARPSHARP;
            }
          // fall through
          case 191: break;
          case 43:
            { return types.L_AND;
            }
          // fall through
          case 192: break;
          case 44:
            { return types.TYPE_ARGUMENT;
            }
          // fall through
          case 193: break;
          case 45:
            { yybegin(IN_OCAML_ML_COMMENT); inCommentString = false; inCommentChar = false; commentDepth = 1; tokenStart();
            }
          // fall through
          case 194: break;
          case 46:
            { return types.STARDOT;
            }
          // fall through
          case 195: break;
          case 47:
            { return types.STRING_CONCAT;
            }
          // fall through
          case 196: break;
          case 48:
            { return types.PLUSDOT;
            }
          // fall through
          case 197: break;
          case 49:
            { return types.MINUSDOT;
            }
          // fall through
          case 198: break;
          case 50:
            { return types.RIGHT_ARROW;
            }
          // fall through
          case 199: break;
          case 51:
            { return types.DOTDOT;
            }
          // fall through
          case 200: break;
          case 52:
            { return types.SLASHDOT;
            }
          // fall through
          case 201: break;
          case 53:
            { return types.TAG_AUTO_CLOSE;
            }
          // fall through
          case 202: break;
          case 54:
            { return types.FLOAT_VALUE;
            }
          // fall through
          case 203: break;
          case 55:
            { return types.SHORTCUT;
            }
          // fall through
          case 204: break;
          case 56:
            { return types.COLON_EQ;
            }
          // fall through
          case 205: break;
          case 57:
            { return types.COLON_GT;
            }
          // fall through
          case 206: break;
          case 58:
            { return types.SEMISEMI;
            }
          // fall through
          case 207: break;
          case 59:
            { return types.LEFT_ARROW;
            }
          // fall through
          case 208: break;
          case 60:
            { return types.TAG_LT_SLASH;
            }
          // fall through
          case 209: break;
          case 61:
            { return types.LT_OR_EQUAL;
            }
          // fall through
          case 210: break;
          case 62:
            { return types.OP_STRUCT_DIFF;
            }
          // fall through
          case 211: break;
          case 63:
            { return types.EQEQ;
            }
          // fall through
          case 212: break;
          case 64:
            { return types.ARROW;
            }
          // fall through
          case 213: break;
          case 65:
            { return types.GT_OR_EQUAL;
            }
          // fall through
          case 214: break;
          case 66:
            { return types.ARROBASE_2;
            }
          // fall through
          case 215: break;
          case 67:
            { return types.LARRAY;
            }
          // fall through
          case 216: break;
          case 68:
            { return types.POLY_VARIANT;
            }
          // fall through
          case 217: break;
          case 69:
            { return types.AS;
            }
          // fall through
          case 218: break;
          case 70:
            { return types.DO;
            }
          // fall through
          case 219: break;
          case 71:
            { return types.IF;
            }
          // fall through
          case 220: break;
          case 72:
            { return types.IN;
            }
          // fall through
          case 221: break;
          case 73:
            { return types.OF;
            }
          // fall through
          case 222: break;
          case 74:
            { return types.OR;
            }
          // fall through
          case 223: break;
          case 75:
            { return types.TO;
            }
          // fall through
          case 224: break;
          case 76:
            { return types.PIPE_FIRST;
            }
          // fall through
          case 225: break;
          case 77:
            { return types.PIPE_FORWARD;
            }
          // fall through
          case 226: break;
          case 78:
            { return types.RARRAY;
            }
          // fall through
          case 227: break;
          case 79:
            { return types.L_OR;
            }
          // fall through
          case 228: break;
          case 80:
            { if (!inCommentString) commentDepth += 1;
            }
          // fall through
          case 229: break;
          case 81:
            { if (!inCommentString) { commentDepth -= 1; if(commentDepth == 0) { yybegin(INITIAL); tokenEnd(); return types.MULTI_COMMENT; } }
            }
          // fall through
          case 230: break;
          case 82:
            { return types.NOT_EQEQ;
            }
          // fall through
          case 231: break;
          case 83:
            { return types.DIRECTIVE_IF;
            }
          // fall through
          case 232: break;
          case 84:
            { return types.CHAR_VALUE;
            }
          // fall through
          case 233: break;
          case 85:
            { return types.DOTDOTDOT;
            }
          // fall through
          case 234: break;
          case 86:
            { return types.EQEQEQ;
            }
          // fall through
          case 235: break;
          case 87:
            { return types.ARROBASE_3;
            }
          // fall through
          case 236: break;
          case 88:
            { return types.AND;
            }
          // fall through
          case 237: break;
          case 89:
            { return types.ASR;
            }
          // fall through
          case 238: break;
          case 90:
            { return types.END;
            }
          // fall through
          case 239: break;
          case 91:
            { return types.FOR;
            }
          // fall through
          case 240: break;
          case 92:
            { return types.FUN;
            }
          // fall through
          case 241: break;
          case 93:
            { return types.LET;
            }
          // fall through
          case 242: break;
          case 94:
            { return types.LOR;
            }
          // fall through
          case 243: break;
          case 95:
            { return types.LSL;
            }
          // fall through
          case 244: break;
          case 96:
            { return types.LSR;
            }
          // fall through
          case 245: break;
          case 97:
            { return types.MOD;
            }
          // fall through
          case 246: break;
          case 98:
            { return types.NEW;
            }
          // fall through
          case 247: break;
          case 99:
            { return types.PRI;
            }
          // fall through
          case 248: break;
          case 100:
            { return types.PUB;
            }
          // fall through
          case 249: break;
          case 101:
            { return types.RAW;
            }
          // fall through
          case 250: break;
          case 102:
            { return types.REC;
            }
          // fall through
          case 251: break;
          case 103:
            { return types.REF;
            }
          // fall through
          case 252: break;
          case 104:
            { return types.SIG;
            }
          // fall through
          case 253: break;
          case 105:
            { return types.TRY;
            }
          // fall through
          case 254: break;
          case 106:
            { return types.VAL;
            }
          // fall through
          case 255: break;
          case 107:
            { /* a char */
            }
          // fall through
          case 256: break;
          case 108:
            { return types.DIRECTIVE_END;
            }
          // fall through
          case 257: break;
          case 109:
            { return types.NONE;
            }
          // fall through
          case 258: break;
          case 110:
            { return types.SOME;
            }
          // fall through
          case 259: break;
          case 111:
            { return types.DONE;
            }
          // fall through
          case 260: break;
          case 112:
            { return types.ELSE;
            }
          // fall through
          case 261: break;
          case 113:
            { return types.LAND;
            }
          // fall through
          case 262: break;
          case 114:
            { return types.LAZY;
            }
          // fall through
          case 263: break;
          case 115:
            { return types.LXOR;
            }
          // fall through
          case 264: break;
          case 116:
            { return types.OPEN;
            }
          // fall through
          case 265: break;
          case 117:
            { return types.THEN;
            }
          // fall through
          case 266: break;
          case 118:
            { return types.BOOL_VALUE;
            }
          // fall through
          case 267: break;
          case 119:
            { return types.TYPE;
            }
          // fall through
          case 268: break;
          case 120:
            { return types.UNIT;
            }
          // fall through
          case 269: break;
          case 121:
            { return types.WHEN;
            }
          // fall through
          case 270: break;
          case 122:
            { return types.WITH;
            }
          // fall through
          case 271: break;
          case 123:
            { return types.DIRECTIVE_ELIF;
            }
          // fall through
          case 272: break;
          case 124:
            { return types.DIRECTIVE_ELSE;
            }
          // fall through
          case 273: break;
          case 125:
            { return types.BEGIN;
            }
          // fall through
          case 274: break;
          case 126:
            { return types.CLASS;
            }
          // fall through
          case 275: break;
          case 127:
            { return types.MATCH;
            }
          // fall through
          case 276: break;
          case 128:
            { return types.RAISE;
            }
          // fall through
          case 277: break;
          case 129:
            { return types.WHILE;
            }
          // fall through
          case 278: break;
          case 130:
            { return types.DIRECTIVE_ENDIF;
            }
          // fall through
          case 279: break;
          case 131:
            { return types.ASSERT;
            }
          // fall through
          case 280: break;
          case 132:
            { return types.DOWNTO;
            }
          // fall through
          case 281: break;
          case 133:
            { return types.METHOD;
            }
          // fall through
          case 282: break;
          case 134:
            { return types.MODULE;
            }
          // fall through
          case 283: break;
          case 135:
            { return types.NONREC;
            }
          // fall through
          case 284: break;
          case 136:
            { return types.OBJECT;
            }
          // fall through
          case 285: break;
          case 137:
            { return types.OPTION;
            }
          // fall through
          case 286: break;
          case 138:
            { return types.STRUCT;
            }
          // fall through
          case 287: break;
          case 139:
            { return types.FUNCTOR;
            }
          // fall through
          case 288: break;
          case 140:
            { return types.INCLUDE;
            }
          // fall through
          case 289: break;
          case 141:
            { return types.INHERIT;
            }
          // fall through
          case 290: break;
          case 142:
            { return types.MUTABLE;
            }
          // fall through
          case 291: break;
          case 143:
            { return types.PRIVATE;
            }
          // fall through
          case 292: break;
          case 144:
            { return types.VIRTUAL;
            }
          // fall through
          case 293: break;
          case 145:
            { return types.EXTERNAL;
            }
          // fall through
          case 294: break;
          case 146:
            { return types.FUNCTION;
            }
          // fall through
          case 295: break;
          case 147:
            { return types.EXCEPTION;
            }
          // fall through
          case 296: break;
          case 148:
            { return types.CONSTRAINT;
            }
          // fall through
          case 297: break;
          case 149:
            { return types.INITIALIZER;
            }
          // fall through
          case 298: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
