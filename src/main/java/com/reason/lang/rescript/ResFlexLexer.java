// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Rescript.flex

package com.reason.lang.rescript;

import com.intellij.lexer.*;
import com.intellij.psi.tree.*;
import com.reason.lang.core.type.*;

import static com.intellij.psi.TokenType.*;

@SuppressWarnings("ALL")

public class ResFlexLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int INITIAL = 2;
  public static final int IN_DECLARATION = 4;
  public static final int IN_TEMPLATE = 6;
  public static final int IN_STRING = 8;
  public static final int IN_ML_COMMENT = 10;
  public static final int IN_SL_COMMENT = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\2\27\4\30\2\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\2\41\1\43\1\41"+
    "\7\44\1\45\1\46\1\47\2\44\1\50\4\44\1\51"+
    "\2\44\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100"+
    "\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110"+
    "\1\111\1\112\1\113\1\114\1\115\6\0\1\3\u01a2\0"+
    "\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\1\3\2\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\2\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\3\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\23\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\40\2\50\1\51\1\3\2\52\1\53\1\54\2\52"+
    "\1\55\1\52\1\56\2\52\2\57\1\60\1\61\1\62"+
    "\1\63\2\0\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\77\2\0\3\23"+
    "\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107"+
    "\2\33\1\42\1\110\5\42\1\111\6\42\1\112\1\113"+
    "\15\42\1\114\1\42\1\115\17\42\1\116\1\117\1\50"+
    "\5\52\1\120\1\121\1\122\2\123\3\0\1\123\1\64"+
    "\1\124\1\77\1\23\1\0\1\77\2\23\1\125\2\33"+
    "\1\126\1\127\12\42\1\130\3\42\1\131\6\42\1\132"+
    "\1\42\1\133\1\134\1\135\3\42\1\136\1\42\1\137"+
    "\4\42\1\140\1\141\1\42\1\142\1\143\1\144\1\145"+
    "\4\42\1\146\3\42\1\147\4\42\1\143\6\0\1\77"+
    "\1\23\1\150\1\151\7\42\1\152\1\42\1\153\6\42"+
    "\1\154\1\155\1\156\1\157\6\42\1\160\5\42\1\161"+
    "\1\162\1\163\1\164\2\42\1\165\1\42\1\166\2\0"+
    "\1\77\1\42\1\167\1\170\1\171\1\172\1\173\10\42"+
    "\1\174\7\42\1\175\4\42\1\176\1\177\1\42\1\200"+
    "\7\42\1\201\1\202\1\42\1\203\1\204\1\205\1\42"+
    "\1\206\1\207\1\210\5\42\1\211\1\212\1\213\1\42"+
    "\1\214\1\215\1\216\2\42\1\217\1\220\2\42\1\221"+
    "\1\42\1\222\1\42\1\223";

  private static int [] zzUnpackAction() {
    int [] result = new int[378];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\116\0\234\0\352\0\u0138\0\u0186\0\u01d4\0\u0222"+
    "\0\u0222\0\u0270\0\u0222\0\u02be\0\u030c\0\u0222\0\u035a\0\u0222"+
    "\0\u03a8\0\u03f6\0\u0222\0\u0222\0\u0444\0\u0492\0\u0222\0\u04e0"+
    "\0\u052e\0\u057c\0\u05ca\0\u0618\0\u0666\0\u0222\0\u06b4\0\u0702"+
    "\0\u0222\0\u0222\0\u0222\0\u0750\0\u079e\0\u07ec\0\u0222\0\u0222"+
    "\0\u0222\0\u0222\0\u083a\0\u0222\0\u0888\0\u08d6\0\u0924\0\u0972"+
    "\0\u09c0\0\u0a0e\0\u083a\0\u0a5c\0\u0aaa\0\u0af8\0\u0b46\0\u0b94"+
    "\0\u0be2\0\u0c30\0\u0c7e\0\u0ccc\0\u0d1a\0\u0d68\0\u0db6\0\u0222"+
    "\0\u0e04\0\u0222\0\u0222\0\u0222\0\u0e52\0\u0e52\0\u0ea0\0\u0eee"+
    "\0\u0f3c\0\u0eee\0\u0f8a\0\u0222\0\u0222\0\u0222\0\u0fd8\0\u0222"+
    "\0\u1026\0\u0222\0\u1074\0\u10c2\0\u0222\0\u1110\0\u115e\0\u0222"+
    "\0\u11ac\0\u0222\0\u11fa\0\u1248\0\u1296\0\u0222\0\u0222\0\u0222"+
    "\0\u0222\0\u0222\0\u12e4\0\u0222\0\u0222\0\u0222\0\u0222\0\u1332"+
    "\0\u1380\0\u13ce\0\u0222\0\u141c\0\u146a\0\u0222\0\u0222\0\u0222"+
    "\0\u0222\0\u0222\0\u0222\0\u14b8\0\u0222\0\u1506\0\u1554\0\u15a2"+
    "\0\u15f0\0\u163e\0\u168c\0\u16da\0\u1728\0\u1776\0\u17c4\0\u1812"+
    "\0\u1860\0\u18ae\0\u18fc\0\u194a\0\u1998\0\u083a\0\u19e6\0\u1a34"+
    "\0\u1a82\0\u1ad0\0\u1b1e\0\u1b6c\0\u1bba\0\u1c08\0\u1c56\0\u1ca4"+
    "\0\u1cf2\0\u1d40\0\u1d8e\0\u1ddc\0\u083a\0\u1e2a\0\u083a\0\u1e78"+
    "\0\u1ec6\0\u1f14\0\u1f62\0\u1fb0\0\u1ffe\0\u204c\0\u209a\0\u20e8"+
    "\0\u2136\0\u2184\0\u21d2\0\u2220\0\u226e\0\u22bc\0\u0222\0\u0222"+
    "\0\u230a\0\u2358\0\u23a6\0\u23f4\0\u2442\0\u2490\0\u0222\0\u0222"+
    "\0\u0222\0\u0222\0\u11fa\0\u24de\0\u252c\0\u257a\0\u25c8\0\u25c8"+
    "\0\u0222\0\u0222\0\u2616\0\u2664\0\u26b2\0\u2700\0\u274e\0\u0222"+
    "\0\u279c\0\u27ea\0\u083a\0\u083a\0\u2838\0\u2886\0\u28d4\0\u2922"+
    "\0\u2970\0\u29be\0\u2a0c\0\u2a5a\0\u2aa8\0\u2af6\0\u083a\0\u2b44"+
    "\0\u2b92\0\u2be0\0\u083a\0\u2c2e\0\u2c7c\0\u2cca\0\u2d18\0\u2d66"+
    "\0\u2db4\0\u083a\0\u2e02\0\u083a\0\u083a\0\u083a\0\u2e50\0\u2e9e"+
    "\0\u2eec\0\u2f3a\0\u2f88\0\u083a\0\u2fd6\0\u3024\0\u3072\0\u30c0"+
    "\0\u310e\0\u083a\0\u315c\0\u083a\0\u083a\0\u083a\0\u083a\0\u31aa"+
    "\0\u31f8\0\u3246\0\u3294\0\u083a\0\u32e2\0\u3330\0\u337e\0\u083a"+
    "\0\u33cc\0\u341a\0\u3468\0\u34b6\0\u0e52\0\u3504\0\u3552\0\u35a0"+
    "\0\u35ee\0\u363c\0\u368a\0\u36d8\0\u13ce\0\u0750\0\u0750\0\u3726"+
    "\0\u3774\0\u37c2\0\u3810\0\u385e\0\u38ac\0\u38fa\0\u083a\0\u3948"+
    "\0\u083a\0\u3996\0\u39e4\0\u3a32\0\u3a80\0\u3ace\0\u3b1c\0\u083a"+
    "\0\u083a\0\u083a\0\u083a\0\u3b6a\0\u3bb8\0\u3c06\0\u3c54\0\u3ca2"+
    "\0\u3cf0\0\u083a\0\u3d3e\0\u3d8c\0\u3dda\0\u3e28\0\u3e76\0\u083a"+
    "\0\u083a\0\u083a\0\u083a\0\u3ec4\0\u3f12\0\u083a\0\u3f60\0\u083a"+
    "\0\u3fae\0\u3ffc\0\u13ce\0\u404a\0\u083a\0\u083a\0\u083a\0\u083a"+
    "\0\u083a\0\u4098\0\u40e6\0\u4134\0\u4182\0\u41d0\0\u421e\0\u426c"+
    "\0\u42ba\0\u083a\0\u4308\0\u4356\0\u43a4\0\u43f2\0\u4440\0\u448e"+
    "\0\u44dc\0\u083a\0\u452a\0\u4578\0\u45c6\0\u4614\0\u083a\0\u083a"+
    "\0\u4662\0\u083a\0\u46b0\0\u46fe\0\u474c\0\u479a\0\u47e8\0\u4836"+
    "\0\u4884\0\u083a\0\u083a\0\u48d2\0\u083a\0\u083a\0\u083a\0\u4920"+
    "\0\u083a\0\u083a\0\u083a\0\u496e\0\u49bc\0\u4a0a\0\u4a58\0\u4aa6"+
    "\0\u083a\0\u083a\0\u083a\0\u4af4\0\u083a\0\u083a\0\u083a\0\u4b42"+
    "\0\u4b90\0\u083a\0\u083a\0\u4bde\0\u4c2c\0\u083a\0\u4c7a\0\u083a"+
    "\0\u4cc8\0\u083a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[378];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\116\10\1\11\1\12\1\13\1\11\1\12\1\14\1\15"+
    "\1\16\1\17\1\11\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\4\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\4\44"+
    "\1\45\2\44\1\46\1\44\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\2\63\1\64\2\63\1\65\1\66\1\67\1\70\1\71"+
    "\1\63\1\72\1\73\1\74\1\75\1\76\1\77\3\63"+
    "\1\100\1\101\1\102\1\103\1\104\1\12\1\13\1\11"+
    "\1\12\1\14\45\104\1\50\2\104\1\105\1\104\21\106"+
    "\1\107\10\106\4\104\1\110\1\111\1\112\1\110\1\111"+
    "\1\113\3\110\1\114\45\110\1\115\32\110\1\100\1\110"+
    "\1\102\1\110\3\116\2\11\1\117\1\116\1\120\43\116"+
    "\1\121\45\116\2\11\1\117\1\116\1\122\7\116\1\123"+
    "\4\116\1\124\73\116\1\125\2\11\1\126\110\116\117\0"+
    "\1\12\2\0\1\12\113\0\1\13\150\0\1\127\70\0"+
    "\1\130\30\0\11\131\4\0\1\131\1\0\32\131\17\0"+
    "\1\132\102\0\2\133\4\0\45\133\1\134\2\133\1\135"+
    "\1\133\32\135\4\133\23\0\1\136\112\0\1\137\2\0"+
    "\1\140\115\0\1\141\12\0\1\142\102\0\1\143\111\0"+
    "\1\144\3\0\1\145\1\146\11\0\1\147\102\0\1\150"+
    "\1\0\5\34\10\0\1\151\1\152\2\153\1\154\2\153"+
    "\1\155\4\0\1\34\2\0\1\151\2\0\1\152\1\0"+
    "\10\153\1\154\10\153\1\155\2\153\27\0\1\150\1\0"+
    "\5\34\11\0\1\152\6\153\4\0\1\34\5\0\1\152"+
    "\1\0\24\153\36\0\1\156\2\0\1\157\1\160\101\0"+
    "\1\161\1\0\1\162\10\0\1\163\115\0\1\164\1\165"+
    "\73\0\1\44\10\0\5\44\7\0\11\44\4\0\1\44"+
    "\1\0\32\44\20\0\1\44\10\0\5\44\7\0\11\44"+
    "\4\0\1\44\1\0\16\44\1\166\13\44\20\0\1\44"+
    "\10\0\5\44\7\0\11\44\4\0\1\44\1\0\16\44"+
    "\1\167\13\44\20\0\1\63\10\0\5\63\7\0\11\63"+
    "\4\0\1\63\1\0\32\63\20\0\1\63\10\0\5\63"+
    "\7\0\11\63\4\0\1\63\1\0\15\63\1\170\4\63"+
    "\1\171\3\63\1\172\3\63\20\0\1\63\10\0\5\63"+
    "\7\0\11\63\4\0\1\63\1\0\4\63\1\173\25\63"+
    "\20\0\1\63\10\0\5\63\7\0\11\63\4\0\1\63"+
    "\1\0\1\174\12\63\1\175\2\63\1\176\13\63\20\0"+
    "\1\63\10\0\5\63\7\0\11\63\4\0\1\63\1\0"+
    "\16\63\1\177\13\63\20\0\1\63\10\0\5\63\7\0"+
    "\11\63\4\0\1\63\1\0\13\63\1\200\1\63\1\201"+
    "\11\63\1\202\2\63\20\0\1\63\10\0\5\63\7\0"+
    "\11\63\4\0\1\63\1\0\1\203\15\63\1\204\5\63"+
    "\1\205\5\63\20\0\1\63\10\0\5\63\7\0\11\63"+
    "\4\0\1\63\1\0\5\63\1\206\7\63\1\207\14\63"+
    "\20\0\1\63\10\0\5\63\7\0\11\63\4\0\1\63"+
    "\1\0\1\210\3\63\1\211\3\63\1\212\5\63\1\213"+
    "\3\63\1\214\4\63\1\215\2\63\20\0\1\63\10\0"+
    "\5\63\7\0\11\63\4\0\1\63\1\0\1\216\3\63"+
    "\1\217\11\63\1\220\5\63\1\221\5\63\20\0\1\63"+
    "\10\0\5\63\7\0\11\63\4\0\1\63\1\0\4\63"+
    "\1\222\11\63\1\223\13\63\20\0\1\63\10\0\5\63"+
    "\7\0\11\63\4\0\1\63\1\0\1\63\1\224\3\63"+
    "\1\225\11\63\1\226\1\63\1\227\10\63\20\0\1\63"+
    "\10\0\5\63\7\0\11\63\4\0\1\63\1\0\21\63"+
    "\1\230\2\63\1\231\5\63\20\0\1\63\10\0\5\63"+
    "\7\0\11\63\4\0\1\63\1\0\1\232\3\63\1\233"+
    "\25\63\20\0\1\63\10\0\5\63\7\0\11\63\4\0"+
    "\1\63\1\0\10\63\1\234\12\63\1\235\2\63\1\236"+
    "\3\63\20\0\1\63\10\0\5\63\7\0\11\63\4\0"+
    "\1\63\1\0\7\63\1\237\11\63\1\240\6\63\1\241"+
    "\1\63\20\0\1\63\10\0\5\63\7\0\11\63\4\0"+
    "\1\63\1\0\15\63\1\242\14\63\20\0\1\63\10\0"+
    "\5\63\7\0\11\63\4\0\1\63\1\0\1\243\7\63"+
    "\1\244\21\63\20\0\1\63\10\0\5\63\7\0\11\63"+
    "\4\0\1\63\1\0\7\63\1\245\1\246\21\63\42\0"+
    "\1\247\54\0\1\250\16\0\1\106\10\0\5\106\7\0"+
    "\11\106\4\0\1\106\1\0\32\106\20\0\1\106\10\0"+
    "\5\106\7\0\11\106\4\0\1\106\1\0\4\106\1\251"+
    "\25\106\4\0\11\110\1\0\45\110\1\0\32\110\1\0"+
    "\1\110\1\0\2\110\1\111\2\110\1\111\4\110\1\0"+
    "\45\110\1\0\32\110\1\0\1\110\1\0\3\110\1\112"+
    "\6\110\1\0\45\110\1\0\32\110\1\0\1\110\1\0"+
    "\1\110\2\0\1\116\113\0\2\116\1\252\2\0\1\253"+
    "\17\116\5\254\44\116\1\255\10\116\1\256\6\116\24\0"+
    "\1\257\110\0\1\260\100\0\1\125\150\0\1\261\74\0"+
    "\1\131\10\0\5\131\7\0\11\131\4\0\1\131\1\0"+
    "\32\131\20\0\1\262\110\0\1\133\4\0\1\263\10\0"+
    "\5\264\21\0\1\133\5\0\1\133\13\0\1\133\1\265"+
    "\2\0\1\133\1\0\1\133\3\0\1\266\22\0\1\267"+
    "\10\0\5\270\7\0\11\270\4\0\1\270\1\0\32\270"+
    "\27\0\1\271\117\0\5\150\11\0\1\152\6\272\4\0"+
    "\1\150\5\0\1\152\1\0\24\272\31\0\2\273\107\0"+
    "\1\274\1\0\1\274\2\0\5\275\111\0\4\276\112\0"+
    "\5\277\7\0\3\277\14\0\6\277\65\0\1\300\74\0"+
    "\1\44\10\0\5\44\7\0\11\44\4\0\1\44\1\0"+
    "\15\44\1\301\14\44\20\0\1\44\10\0\5\44\7\0"+
    "\11\44\4\0\1\44\1\0\14\44\1\302\15\44\20\0"+
    "\1\63\10\0\5\63\7\0\11\63\4\0\1\63\1\0"+
    "\3\63\1\303\26\63\20\0\1\63\10\0\5\63\7\0"+
    "\11\63\4\0\1\63\1\0\21\63\1\304\1\305\5\63"+
    "\1\306\1\63\20\0\1\63\10\0\5\63\7\0\11\63"+
    "\4\0\1\63\1\0\1\307\31\63\20\0\1\63\10\0"+
    "\5\63\7\0\11\63\4\0\1\63\1\0\6\63\1\310"+
    "\23\63\20\0\1\63\10\0\5\63\7\0\11\63\4\0"+
    "\1\63\1\0\23\63\1\311\6\63\20\0\1\63\10\0"+
    "\5\63\7\0\11\63\4\0\1\63\1\0\1\312\31\63"+
    "\20\0\1\63\10\0\5\63\7\0\11\63\4\0\1\63"+
    "\1\0\15\63\1\313\14\63\20\0\1\63\10\0\5\63"+
    "\7\0\11\63\4\0\1\63\1\0\15\63\1\314\10\63"+
    "\1\315\3\63\20\0\1\63\10\0\5\63\7\0\11\63"+
    "\4\0\1\63\1\0\22\63\1\316\7\63\20\0\1\63"+
    "\10\0\5\63\7\0\11\63\4\0\1\63\1\0\3\63"+
    "\1\317\26\63\20\0\1\63\10\0\5\63\7\0\11\63"+
    "\4\0\1\63\1\0\2\63\1\320\20\63\1\321\6\63"+
    "\20\0\1\63\10\0\5\63\7\0\11\63\4\0\1\63"+
    "\1\0\13\63\1\322\16\63\20\0\1\63\10\0\5\63"+
    "\7\0\11\63\4\0\1\63\1\0\21\63\1\323\10\63"+
    "\20\0\1\63\10\0\5\63\7\0\11\63\4\0\1\63"+
    "\1\0\15\63\1\324\14\63\20\0\1\63\10\0\5\63"+
    "\7\0\11\63\4\0\1\63\1\0\2\63\1\325\4\63"+
    "\1\326\1\327\21\63\20\0\1\63\10\0\5\63\7\0"+
    "\11\63\4\0\1\63\1\0\15\63\1\330\13\63\1\331"+
    "\20\0\1\63\10\0\5\63\7\0\11\63\4\0\1\63"+
    "\1\0\23\63\1\332\6\63\20\0\1\63\10\0\5\63"+
    "\7\0\11\63\4\0\1\63\1\0\22\63\1\333\7\63"+
    "\20\0\1\63\10\0\5\63\7\0\11\63\4\0\1\63"+
    "\1\0\21\63\1\334\10\63\20\0\1\63\10\0\5\63"+
    "\7\0\11\63\4\0\1\63\1\0\13\63\1\335\5\63"+
    "\1\336\10\63\20\0\1\63\10\0\5\63\7\0\11\63"+
    "\4\0\1\63\1\0\16\63\1\337\13\63\20\0\1\63"+
    "\10\0\5\63\7\0\11\63\4\0\1\63\1\0\23\63"+
    "\1\340\6\63\20\0\1\63\10\0\5\63\7\0\11\63"+
    "\4\0\1\63\1\0\23\63\1\341\6\63\20\0\1\63"+
    "\10\0\5\63\7\0\11\63\4\0\1\63\1\0\3\63"+
    "\1\342\26\63\20\0\1\63\10\0\5\63\7\0\11\63"+
    "\4\0\1\63\1\0\23\63\1\343\6\63\20\0\1\63"+
    "\10\0\5\63\7\0\11\63\4\0\1\63\1\0\26\63"+
    "\1\344\3\63\20\0\1\63\10\0\5\63\7\0\11\63"+
    "\4\0\1\63\1\0\15\63\1\345\14\63\20\0\1\63"+
    "\10\0\5\63\7\0\11\63\4\0\1\63\1\0\11\63"+
    "\1\346\20\63\20\0\1\63\10\0\5\63\7\0\11\63"+
    "\4\0\1\63\1\0\4\63\1\347\16\63\1\350\6\63"+
    "\20\0\1\63\10\0\5\63\7\0\11\63\4\0\1\63"+
    "\1\0\10\63\1\351\21\63\20\0\1\63\10\0\5\63"+
    "\7\0\11\63\4\0\1\63\1\0\1\63\1\352\30\63"+
    "\20\0\1\63\10\0\5\63\7\0\11\63\4\0\1\63"+
    "\1\0\10\63\1\353\15\63\1\354\3\63\20\0\1\63"+
    "\10\0\5\63\7\0\11\63\4\0\1\63\1\0\2\63"+
    "\1\355\2\63\1\356\24\63\20\0\1\63\10\0\5\63"+
    "\7\0\11\63\4\0\1\63\1\0\6\63\1\357\23\63"+
    "\20\0\1\63\10\0\5\63\7\0\11\63\4\0\1\63"+
    "\1\0\21\63\1\360\10\63\20\0\1\63\10\0\5\63"+
    "\7\0\11\63\4\0\1\63\1\0\10\63\1\361\21\63"+
    "\20\0\1\63\10\0\5\63\7\0\11\63\4\0\1\63"+
    "\1\0\4\63\1\362\25\63\20\0\1\63\10\0\5\63"+
    "\7\0\11\63\4\0\1\63\1\0\24\63\1\363\3\63"+
    "\1\364\1\63\20\0\1\63\10\0\5\63\7\0\11\63"+
    "\4\0\1\63\1\0\17\63\1\365\12\63\20\0\1\63"+
    "\10\0\5\63\7\0\11\63\4\0\1\63\1\0\10\63"+
    "\1\366\6\63\1\367\12\63\20\0\1\63\10\0\5\63"+
    "\7\0\11\63\4\0\1\63\1\0\13\63\1\370\16\63"+
    "\20\0\1\63\10\0\5\63\7\0\11\63\4\0\1\63"+
    "\1\0\21\63\1\371\10\63\20\0\1\63\10\0\5\63"+
    "\7\0\11\63\4\0\1\63\1\0\4\63\1\372\3\63"+
    "\1\373\21\63\20\0\1\63\10\0\5\63\7\0\11\63"+
    "\4\0\1\63\1\0\23\63\1\374\6\63\20\0\1\106"+
    "\10\0\5\106\7\0\11\106\4\0\1\106\1\0\2\106"+
    "\1\375\27\106\5\0\1\252\115\0\2\252\140\0\5\376"+
    "\111\0\3\377\113\0\5\u0100\7\0\3\u0100\14\0\6\u0100"+
    "\55\0\5\u0101\111\0\3\u0102\113\0\5\u0103\7\0\3\u0103"+
    "\14\0\6\u0103\44\0\1\270\10\0\5\270\7\0\11\270"+
    "\4\0\1\270\1\0\32\270\31\0\2\273\15\0\6\153"+
    "\4\0\1\273\7\0\24\153\31\0\5\275\111\0\5\275"+
    "\12\0\6\272\4\0\1\275\7\0\24\272\31\0\4\276"+
    "\13\0\6\153\4\0\1\276\7\0\24\153\27\0\1\u0104"+
    "\1\0\5\277\7\0\3\277\3\153\1\u0105\2\153\4\0"+
    "\1\277\1\0\6\277\11\153\1\u0105\12\153\20\0\1\44"+
    "\10\0\5\44\7\0\11\44\4\0\1\44\1\0\4\44"+
    "\1\u0106\25\44\20\0\1\44\10\0\5\44\7\0\11\44"+
    "\4\0\1\44\1\0\4\44\1\u0107\25\44\20\0\1\63"+
    "\10\0\5\63\7\0\11\63\4\0\1\63\1\0\4\63"+
    "\1\u0108\25\63\20\0\1\63\10\0\5\63\7\0\11\63"+
    "\4\0\1\63\1\0\15\63\1\u0109\14\63\20\0\1\63"+
    "\10\0\5\63\7\0\11\63\4\0\1\63\1\0\10\63"+
    "\1\u010a\21\63\20\0\1\63\10\0\5\63\7\0\11\63"+
    "\4\0\1\63\1\0\10\63\1\u010b\21\63\20\0\1\63"+
    "\10\0\5\63\7\0\11\63\4\0\1\63\1\0\2\63"+
    "\1\u010c\27\63\20\0\1\63\10\0\5\63\7\0\11\63"+
    "\4\0\1\63\1\0\22\63\1\u010d\7\63\20\0\1\63"+
    "\10\0\5\63\7\0\11\63\4\0\1\63\1\0\22\63"+
    "\1\u010e\7\63\20\0\1\63\10\0\5\63\7\0\11\63"+
    "\4\0\1\63\1\0\4\63\1\u010f\25\63\20\0\1\63"+
    "\10\0\5\63\7\0\11\63\4\0\1\63\1\0\15\63"+
    "\1\u0110\14\63\20\0\1\63\10\0\5\63\7\0\11\63"+
    "\4\0\1\63\1\0\4\63\1\u0111\25\63\20\0\1\63"+
    "\10\0\5\63\7\0\11\63\4\0\1\63\1\0\4\63"+
    "\1\u0112\25\63\20\0\1\63\10\0\5\63\7\0\11\63"+
    "\4\0\1\63\1\0\4\63\1\u0113\25\63\20\0\1\63"+
    "\10\0\5\63\7\0\11\63\4\0\1\63\1\0\22\63"+
    "\1\363\7\63\20\0\1\63\10\0\5\63\7\0\11\63"+
    "\4\0\1\63\1\0\2\63\1\u0114\27\63\20\0\1\63"+
    "\10\0\5\63\7\0\11\63\4\0\1\63\1\0\13\63"+
    "\1\u0115\16\63\20\0\1\63\10\0\5\63\7\0\11\63"+
    "\4\0\1\63\1\0\4\63\1\u0116\25\63\20\0\1\63"+
    "\10\0\5\63\7\0\11\63\4\0\1\63\1\0\23\63"+
    "\1\u0117\6\63\20\0\1\63\10\0\5\63\7\0\11\63"+
    "\4\0\1\63\1\0\3\63\1\u0118\26\63\20\0\1\63"+
    "\10\0\5\63\7\0\11\63\4\0\1\63\1\0\30\63"+
    "\1\u0119\1\63\20\0\1\63\10\0\5\63\7\0\11\63"+
    "\4\0\1\63\1\0\23\63\1\u011a\6\63\20\0\1\63"+
    "\10\0\5\63\7\0\11\63\4\0\1\63\1\0\21\63"+
    "\1\u011b\10\63\20\0\1\63\10\0\5\63\7\0\11\63"+
    "\4\0\1\63\1\0\2\63\1\u011c\27\63\20\0\1\63"+
    "\10\0\5\63\7\0\11\63\4\0\1\63\1\0\7\63"+
    "\1\u011d\22\63\20\0\1\63\10\0\5\63\7\0\11\63"+
    "\4\0\1\63\1\0\24\63\1\u011e\5\63\20\0\1\63"+
    "\10\0\5\63\7\0\11\63\4\0\1\63\1\0\1\u011f"+
    "\31\63\20\0\1\63\10\0\5\63\7\0\11\63\4\0"+
    "\1\63\1\0\21\63\1\u0120\10\63\20\0\1\63\10\0"+
    "\5\63\7\0\11\63\4\0\1\63\1\0\4\63\1\u0121"+
    "\25\63\20\0\1\63\10\0\5\63\7\0\11\63\4\0"+
    "\1\63\1\0\15\63\1\u0122\14\63\20\0\1\63\10\0"+
    "\5\63\7\0\11\63\4\0\1\63\1\0\10\63\1\u0123"+
    "\21\63\20\0\1\63\10\0\5\63\7\0\11\63\4\0"+
    "\1\63\1\0\25\63\1\u0124\4\63\20\0\1\63\10\0"+
    "\5\63\7\0\11\63\4\0\1\63\1\0\22\63\1\u0125"+
    "\7\63\20\0\1\63\10\0\5\63\7\0\11\63\4\0"+
    "\1\63\1\0\24\63\1\u0126\5\63\20\0\1\63\10\0"+
    "\5\63\7\0\11\63\4\0\1\63\1\0\23\63\1\u0127"+
    "\6\63\20\0\1\63\10\0\5\63\7\0\11\63\4\0"+
    "\1\63\1\0\15\63\1\u0128\14\63\20\0\1\63\10\0"+
    "\5\63\7\0\11\63\4\0\1\63\1\0\4\63\1\u0129"+
    "\25\63\20\0\1\63\10\0\5\63\7\0\11\63\4\0"+
    "\1\63\1\0\4\63\1\u012a\25\63\20\0\1\63\10\0"+
    "\5\63\7\0\11\63\4\0\1\63\1\0\23\63\1\u012b"+
    "\6\63\20\0\1\63\10\0\5\63\7\0\11\63\4\0"+
    "\1\63\1\0\1\u012c\31\63\20\0\1\63\10\0\5\63"+
    "\7\0\11\63\4\0\1\63\1\0\23\63\1\u012d\6\63"+
    "\20\0\1\63\10\0\5\63\7\0\11\63\4\0\1\63"+
    "\1\0\15\63\1\u012e\14\63\20\0\1\63\10\0\5\63"+
    "\7\0\11\63\4\0\1\63\1\0\13\63\1\u012f\16\63"+
    "\20\0\1\63\10\0\5\63\7\0\11\63\4\0\1\63"+
    "\1\0\7\63\1\u0130\22\63\31\0\5\116\111\0\4\u0131"+
    "\112\0\5\116\7\0\3\116\14\0\6\116\55\0\5\133"+
    "\111\0\4\u0132\112\0\5\133\7\0\3\133\14\0\6\133"+
    "\55\0\5\u0104\7\0\3\u0104\3\272\1\u0133\2\272\4\0"+
    "\1\u0104\1\0\6\u0104\11\272\1\u0133\12\272\20\0\1\63"+
    "\10\0\5\63\7\0\11\63\4\0\1\63\1\0\21\63"+
    "\1\u0134\10\63\20\0\1\63\10\0\5\63\7\0\11\63"+
    "\4\0\1\63\1\0\2\63\1\u0135\27\63\20\0\1\63"+
    "\10\0\5\63\7\0\11\63\4\0\1\63\1\0\23\63"+
    "\1\u0136\6\63\20\0\1\63\10\0\5\63\7\0\11\63"+
    "\4\0\1\63\1\0\15\63\1\u0137\14\63\20\0\1\63"+
    "\10\0\5\63\7\0\11\63\4\0\1\63\1\0\7\63"+
    "\1\u0138\22\63\20\0\1\63\10\0\5\63\7\0\11\63"+
    "\4\0\1\63\1\0\22\63\1\u0139\7\63\20\0\1\63"+
    "\10\0\5\63\7\0\11\63\4\0\1\63\1\0\23\63"+
    "\1\u013a\6\63\20\0\1\63\10\0\5\63\7\0\11\63"+
    "\4\0\1\63\1\0\23\63\1\u013b\6\63\20\0\1\63"+
    "\10\0\5\63\7\0\11\63\4\0\1\63\1\0\17\63"+
    "\1\u013c\12\63\20\0\1\63\10\0\5\63\7\0\11\63"+
    "\4\0\1\63\1\0\21\63\1\u013d\10\63\20\0\1\63"+
    "\10\0\5\63\7\0\11\63\4\0\1\63\1\0\23\63"+
    "\1\u013e\6\63\20\0\1\63\10\0\5\63\7\0\11\63"+
    "\4\0\1\63\1\0\24\63\1\u013f\5\63\20\0\1\63"+
    "\10\0\5\63\7\0\11\63\4\0\1\63\1\0\21\63"+
    "\1\u0140\10\63\20\0\1\63\10\0\5\63\7\0\11\63"+
    "\4\0\1\63\1\0\10\63\1\u0141\21\63\20\0\1\63"+
    "\10\0\5\63\7\0\11\63\4\0\1\63\1\0\7\63"+
    "\1\u0142\22\63\20\0\1\63\10\0\5\63\7\0\11\63"+
    "\4\0\1\63\1\0\16\63\1\u0143\13\63\20\0\1\63"+
    "\10\0\5\63\7\0\11\63\4\0\1\63\1\0\13\63"+
    "\1\u0144\16\63\20\0\1\63\10\0\5\63\7\0\11\63"+
    "\4\0\1\63\1\0\1\63\1\u0145\30\63\20\0\1\63"+
    "\10\0\5\63\7\0\11\63\4\0\1\63\1\0\4\63"+
    "\1\u0146\25\63\20\0\1\63\10\0\5\63\7\0\11\63"+
    "\4\0\1\63\1\0\2\63\1\u0147\27\63\20\0\1\63"+
    "\10\0\5\63\7\0\11\63\4\0\1\63\1\0\16\63"+
    "\1\u0148\13\63\20\0\1\63\10\0\5\63\7\0\11\63"+
    "\4\0\1\63\1\0\1\u0149\31\63\20\0\1\63\10\0"+
    "\5\63\7\0\11\63\4\0\1\63\1\0\4\63\1\u014a"+
    "\25\63\20\0\1\63\10\0\5\63\7\0\11\63\4\0"+
    "\1\63\1\0\2\63\1\u014b\27\63\20\0\1\63\10\0"+
    "\5\63\7\0\11\63\4\0\1\63\1\0\2\63\1\u014c"+
    "\27\63\20\0\1\63\10\0\5\63\7\0\11\63\4\0"+
    "\1\63\1\0\2\63\1\u014d\27\63\20\0\1\63\10\0"+
    "\5\63\7\0\11\63\4\0\1\63\1\0\24\63\1\u014e"+
    "\5\63\20\0\1\63\10\0\5\63\7\0\11\63\4\0"+
    "\1\63\1\0\4\63\1\u014f\25\63\31\0\4\116\112\0"+
    "\4\133\101\0\1\63\10\0\5\63\7\0\11\63\4\0"+
    "\1\63\1\0\23\63\1\u0150\6\63\20\0\1\63\10\0"+
    "\5\63\7\0\11\63\4\0\1\63\1\0\21\63\1\u0151"+
    "\10\63\20\0\1\63\10\0\5\63\7\0\11\63\4\0"+
    "\1\63\1\0\16\63\1\u0152\13\63\20\0\1\63\10\0"+
    "\5\63\7\0\11\63\4\0\1\63\1\0\23\63\1\u0153"+
    "\6\63\20\0\1\63\10\0\5\63\7\0\11\63\4\0"+
    "\1\63\1\0\15\63\1\u0154\14\63\20\0\1\63\10\0"+
    "\5\63\7\0\11\63\4\0\1\63\1\0\10\63\1\u0155"+
    "\5\63\1\u0156\13\63\20\0\1\63\10\0\5\63\7\0"+
    "\11\63\4\0\1\63\1\0\3\63\1\u0157\26\63\20\0"+
    "\1\63\10\0\5\63\7\0\11\63\4\0\1\63\1\0"+
    "\10\63\1\u0158\21\63\20\0\1\63\10\0\5\63\7\0"+
    "\11\63\4\0\1\63\1\0\1\u0159\31\63\20\0\1\63"+
    "\10\0\5\63\7\0\11\63\4\0\1\63\1\0\3\63"+
    "\1\u015a\26\63\20\0\1\63\10\0\5\63\7\0\11\63"+
    "\4\0\1\63\1\0\4\63\1\u015b\25\63\20\0\1\63"+
    "\10\0\5\63\7\0\11\63\4\0\1\63\1\0\13\63"+
    "\1\u015c\16\63\20\0\1\63\10\0\5\63\7\0\11\63"+
    "\4\0\1\63\1\0\2\63\1\u015d\27\63\20\0\1\63"+
    "\10\0\5\63\7\0\11\63\4\0\1\63\1\0\23\63"+
    "\1\u015e\6\63\20\0\1\63\10\0\5\63\7\0\11\63"+
    "\4\0\1\63\1\0\15\63\1\u015f\14\63\20\0\1\63"+
    "\10\0\5\63\7\0\11\63\4\0\1\63\1\0\23\63"+
    "\1\u0160\6\63\20\0\1\63\10\0\5\63\7\0\11\63"+
    "\4\0\1\63\1\0\23\63\1\u0161\6\63\20\0\1\63"+
    "\10\0\5\63\7\0\11\63\4\0\1\63\1\0\7\63"+
    "\1\u0162\22\63\20\0\1\63\10\0\5\63\7\0\11\63"+
    "\4\0\1\63\1\0\12\63\1\u0163\17\63\20\0\1\63"+
    "\10\0\5\63\7\0\11\63\4\0\1\63\1\0\1\u0164"+
    "\31\63\20\0\1\63\10\0\5\63\7\0\11\63\4\0"+
    "\1\63\1\0\1\u0165\31\63\20\0\1\63\10\0\5\63"+
    "\7\0\11\63\4\0\1\63\1\0\10\63\1\u0166\21\63"+
    "\20\0\1\63\10\0\5\63\7\0\11\63\4\0\1\63"+
    "\1\0\1\u0167\31\63\20\0\1\63\10\0\5\63\7\0"+
    "\11\63\4\0\1\63\1\0\16\63\1\u0168\13\63\20\0"+
    "\1\63\10\0\5\63\7\0\11\63\4\0\1\63\1\0"+
    "\21\63\1\u0169\10\63\20\0\1\63\10\0\5\63\7\0"+
    "\11\63\4\0\1\63\1\0\4\63\1\u016a\25\63\20\0"+
    "\1\63\10\0\5\63\7\0\11\63\4\0\1\63\1\0"+
    "\23\63\1\u016b\6\63\20\0\1\63\10\0\5\63\7\0"+
    "\11\63\4\0\1\63\1\0\13\63\1\u016c\16\63\20\0"+
    "\1\63\10\0\5\63\7\0\11\63\4\0\1\63\1\0"+
    "\4\63\1\u016d\25\63\20\0\1\63\10\0\5\63\7\0"+
    "\11\63\4\0\1\63\1\0\4\63\1\u016e\25\63\20\0"+
    "\1\63\10\0\5\63\7\0\11\63\4\0\1\63\1\0"+
    "\13\63\1\u016f\16\63\20\0\1\63\10\0\5\63\7\0"+
    "\11\63\4\0\1\63\1\0\10\63\1\u0170\21\63\20\0"+
    "\1\63\10\0\5\63\7\0\11\63\4\0\1\63\1\0"+
    "\16\63\1\u0171\13\63\20\0\1\63\10\0\5\63\7\0"+
    "\11\63\4\0\1\63\1\0\13\63\1\u0172\16\63\20\0"+
    "\1\63\10\0\5\63\7\0\11\63\4\0\1\63\1\0"+
    "\15\63\1\u0173\14\63\20\0\1\63\10\0\5\63\7\0"+
    "\11\63\4\0\1\63\1\0\10\63\1\u0174\21\63\20\0"+
    "\1\63\10\0\5\63\7\0\11\63\4\0\1\63\1\0"+
    "\15\63\1\u0175\14\63\20\0\1\63\10\0\5\63\7\0"+
    "\11\63\4\0\1\63\1\0\15\63\1\u0176\14\63\20\0"+
    "\1\63\10\0\5\63\7\0\11\63\4\0\1\63\1\0"+
    "\31\63\1\u0177\20\0\1\63\10\0\5\63\7\0\11\63"+
    "\4\0\1\63\1\0\23\63\1\u0178\6\63\20\0\1\63"+
    "\10\0\5\63\7\0\11\63\4\0\1\63\1\0\4\63"+
    "\1\u0179\25\63\20\0\1\63\10\0\5\63\7\0\11\63"+
    "\4\0\1\63\1\0\21\63\1\u017a\10\63\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[19734];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\2\11\1\1\1\11\2\1\1\11\1\1\1\11"+
    "\2\1\2\11\2\1\1\11\6\1\1\11\2\1\3\11"+
    "\3\1\4\11\1\1\1\11\23\1\1\11\1\1\3\11"+
    "\7\1\3\11\1\1\1\11\1\1\1\11\2\1\1\11"+
    "\2\1\1\11\1\1\1\11\2\0\1\1\5\11\1\1"+
    "\4\11\1\1\2\0\1\11\2\1\6\11\1\1\1\11"+
    "\61\1\2\11\6\1\4\11\1\1\3\0\2\1\2\11"+
    "\1\1\1\0\3\1\1\11\75\1\6\0\55\1\2\0"+
    "\110\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[378];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    public ResFlexLexer(ORLangTypes types) {
        this.types = types;
    }

    private ORLangTypes types;
    private int tokenStartIndex;
    private CharSequence quotedStringId;
    private int commentDepth;
    private boolean inCommentString = false;

    //Store the start index of a token
    private void tokenStart() {
        tokenStartIndex = zzStartRead;
    }

    //Set the start index of the token to the stored index
    private void tokenEnd() {
        zzStartRead = tokenStartIndex;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ResFlexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case IN_DECLARATION: {
              yybegin(INITIAL);
            }  // fall though
            case 379: break;
            case IN_TEMPLATE: {
              yybegin(INITIAL);
            }  // fall though
            case 380: break;
            case IN_STRING: {
              yybegin(INITIAL); tokenEnd(); return types.STRING_VALUE;
            }  // fall though
            case 381: break;
            case IN_ML_COMMENT: {
              yybegin(INITIAL); tokenEnd(); return types.MULTI_COMMENT;
            }  // fall though
            case 382: break;
            case IN_SL_COMMENT: {
              yybegin(INITIAL); tokenEnd(); return types.SINGLE_COMMENT;
            }  // fall though
            case 383: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yybegin(INITIAL); yypushback(1);
            }
          // fall through
          case 148: break;
          case 2:
            { return BAD_CHARACTER;
            }
          // fall through
          case 149: break;
          case 3:
            { return WHITE_SPACE;
            }
          // fall through
          case 150: break;
          case 4:
            { return types.EOL;
            }
          // fall through
          case 151: break;
          case 5:
            { return types.EXCLAMATION_MARK;
            }
          // fall through
          case 152: break;
          case 6:
            { yybegin(IN_STRING); tokenStart();
            }
          // fall through
          case 153: break;
          case 7:
            { return types.SHARP;
            }
          // fall through
          case 154: break;
          case 8:
            { return types.PERCENT;
            }
          // fall through
          case 155: break;
          case 9:
            { return types.AMPERSAND;
            }
          // fall through
          case 156: break;
          case 10:
            { return types.SINGLE_QUOTE;
            }
          // fall through
          case 157: break;
          case 11:
            { return types.LPAREN;
            }
          // fall through
          case 158: break;
          case 12:
            { return types.RPAREN;
            }
          // fall through
          case 159: break;
          case 13:
            { return types.STAR;
            }
          // fall through
          case 160: break;
          case 14:
            { return types.PLUS;
            }
          // fall through
          case 161: break;
          case 15:
            { return types.COMMA;
            }
          // fall through
          case 162: break;
          case 16:
            { return types.MINUS;
            }
          // fall through
          case 163: break;
          case 17:
            { return types.DOT;
            }
          // fall through
          case 164: break;
          case 18:
            { return types.SLASH;
            }
          // fall through
          case 165: break;
          case 19:
            { return types.INT_VALUE;
            }
          // fall through
          case 166: break;
          case 20:
            { return types.COLON;
            }
          // fall through
          case 167: break;
          case 21:
            { return types.SEMI;
            }
          // fall through
          case 168: break;
          case 22:
            { return types.LT;
            }
          // fall through
          case 169: break;
          case 23:
            { return types.EQ;
            }
          // fall through
          case 170: break;
          case 24:
            { return types.GT;
            }
          // fall through
          case 171: break;
          case 25:
            { return types.QUESTION_MARK;
            }
          // fall through
          case 172: break;
          case 26:
            { return types.ARROBASE;
            }
          // fall through
          case 173: break;
          case 27:
            { return types.UIDENT;
            }
          // fall through
          case 174: break;
          case 28:
            { return types.LBRACKET;
            }
          // fall through
          case 175: break;
          case 29:
            { return types.BACKSLASH;
            }
          // fall through
          case 176: break;
          case 30:
            { return types.RBRACKET;
            }
          // fall through
          case 177: break;
          case 31:
            { return types.CARRET;
            }
          // fall through
          case 178: break;
          case 32:
            { return types.UNDERSCORE;
            }
          // fall through
          case 179: break;
          case 33:
            { yybegin(IN_TEMPLATE); return types.JS_STRING_OPEN;
            }
          // fall through
          case 180: break;
          case 34:
            { return types.LIDENT;
            }
          // fall through
          case 181: break;
          case 35:
            { return types.LBRACE;
            }
          // fall through
          case 182: break;
          case 36:
            { return types.PIPE;
            }
          // fall through
          case 183: break;
          case 37:
            { return types.RBRACE;
            }
          // fall through
          case 184: break;
          case 38:
            { return types.TILDE;
            }
          // fall through
          case 185: break;
          case 39:
            { yybegin(INITIAL); yypushback(1); tokenEnd();
            }
          // fall through
          case 186: break;
          case 40:
            { yybegin(INITIAL); return types.LIDENT;
            }
          // fall through
          case 187: break;
          case 41:
            { return types.STRING_VALUE;
            }
          // fall through
          case 188: break;
          case 42:
            { 
            }
          // fall through
          case 189: break;
          case 43:
            { return types.DOLLAR;
            }
          // fall through
          case 190: break;
          case 44:
            { yybegin(INITIAL); return types.JS_STRING_CLOSE;
            }
          // fall through
          case 191: break;
          case 45:
            { yybegin(INITIAL); tokenEnd(); return types.STRING_VALUE;
            }
          // fall through
          case 192: break;
          case 46:
            { inCommentString = !inCommentString;
            }
          // fall through
          case 193: break;
          case 47:
            { yybegin(INITIAL); tokenEnd(); return types.SINGLE_COMMENT;
            }
          // fall through
          case 194: break;
          case 48:
            { return types.NOT_EQ;
            }
          // fall through
          case 195: break;
          case 49:
            { return types.SHARPSHARP;
            }
          // fall through
          case 196: break;
          case 50:
            { return types.POLY_VARIANT;
            }
          // fall through
          case 197: break;
          case 51:
            { return types.L_AND;
            }
          // fall through
          case 198: break;
          case 52:
            { return types.TYPE_ARGUMENT;
            }
          // fall through
          case 199: break;
          case 53:
            { return types.STARDOT;
            }
          // fall through
          case 200: break;
          case 54:
            { return types.STRING_CONCAT;
            }
          // fall through
          case 201: break;
          case 55:
            { return types.PLUSDOT;
            }
          // fall through
          case 202: break;
          case 56:
            { return types.MINUSDOT;
            }
          // fall through
          case 203: break;
          case 57:
            { return types.RIGHT_ARROW;
            }
          // fall through
          case 204: break;
          case 58:
            { return types.DOTDOT;
            }
          // fall through
          case 205: break;
          case 59:
            { yybegin(IN_ML_COMMENT); commentDepth = 1; tokenStart();
            }
          // fall through
          case 206: break;
          case 60:
            { return types.SLASHDOT;
            }
          // fall through
          case 207: break;
          case 61:
            { yybegin(IN_SL_COMMENT); tokenStart();
            }
          // fall through
          case 208: break;
          case 62:
            { return types.TAG_AUTO_CLOSE;
            }
          // fall through
          case 209: break;
          case 63:
            { return types.FLOAT_VALUE;
            }
          // fall through
          case 210: break;
          case 64:
            { return types.SHORTCUT;
            }
          // fall through
          case 211: break;
          case 65:
            { return types.COLON_EQ;
            }
          // fall through
          case 212: break;
          case 66:
            { return types.COLON_GT;
            }
          // fall through
          case 213: break;
          case 67:
            { return types.LEFT_ARROW;
            }
          // fall through
          case 214: break;
          case 68:
            { return types.TAG_LT_SLASH;
            }
          // fall through
          case 215: break;
          case 69:
            { return types.LT_OR_EQUAL;
            }
          // fall through
          case 216: break;
          case 70:
            { return types.EQEQ;
            }
          // fall through
          case 217: break;
          case 71:
            { return types.ARROW;
            }
          // fall through
          case 218: break;
          case 72:
            { return types.AS;
            }
          // fall through
          case 219: break;
          case 73:
            { return types.DO;
            }
          // fall through
          case 220: break;
          case 74:
            { return types.IF;
            }
          // fall through
          case 221: break;
          case 75:
            { return types.IN;
            }
          // fall through
          case 222: break;
          case 76:
            { return types.OF;
            }
          // fall through
          case 223: break;
          case 77:
            { return types.OR;
            }
          // fall through
          case 224: break;
          case 78:
            { return types.PIPE_FORWARD;
            }
          // fall through
          case 225: break;
          case 79:
            { return types.L_OR;
            }
          // fall through
          case 226: break;
          case 80:
            { if (!inCommentString) { commentDepth -= 1; if(commentDepth == 0) { yybegin(INITIAL); tokenEnd(); return types.MULTI_COMMENT; } }
            }
          // fall through
          case 227: break;
          case 81:
            { if (!inCommentString) { commentDepth += 1; }
            }
          // fall through
          case 228: break;
          case 82:
            { return types.NOT_EQEQ;
            }
          // fall through
          case 229: break;
          case 83:
            { return types.CHAR_VALUE;
            }
          // fall through
          case 230: break;
          case 84:
            { return types.DOTDOTDOT;
            }
          // fall through
          case 231: break;
          case 85:
            { return types.EQEQEQ;
            }
          // fall through
          case 232: break;
          case 86:
            { return types.AND;
            }
          // fall through
          case 233: break;
          case 87:
            { return types.ASR;
            }
          // fall through
          case 234: break;
          case 88:
            { return types.END;
            }
          // fall through
          case 235: break;
          case 89:
            { return types.FOR;
            }
          // fall through
          case 236: break;
          case 90:
            { yybegin(IN_DECLARATION); return types.LET;
            }
          // fall through
          case 237: break;
          case 91:
            { return types.LOR;
            }
          // fall through
          case 238: break;
          case 92:
            { return types.LSL;
            }
          // fall through
          case 239: break;
          case 93:
            { return types.LSR;
            }
          // fall through
          case 240: break;
          case 94:
            { return types.MOD;
            }
          // fall through
          case 241: break;
          case 95:
            { return types.NEW;
            }
          // fall through
          case 242: break;
          case 96:
            { return types.PRI;
            }
          // fall through
          case 243: break;
          case 97:
            { return types.PUB;
            }
          // fall through
          case 244: break;
          case 98:
            { return types.RAW;
            }
          // fall through
          case 245: break;
          case 99:
            { return types.REC;
            }
          // fall through
          case 246: break;
          case 100:
            { return types.REF;
            }
          // fall through
          case 247: break;
          case 101:
            { return types.SIG;
            }
          // fall through
          case 248: break;
          case 102:
            { return types.TRY;
            }
          // fall through
          case 249: break;
          case 103:
            { return types.VAL;
            }
          // fall through
          case 250: break;
          case 104:
            { return types.NONE;
            }
          // fall through
          case 251: break;
          case 105:
            { return types.SOME;
            }
          // fall through
          case 252: break;
          case 106:
            { return types.DONE;
            }
          // fall through
          case 253: break;
          case 107:
            { return types.ELSE;
            }
          // fall through
          case 254: break;
          case 108:
            { return types.LAND;
            }
          // fall through
          case 255: break;
          case 109:
            { return types.LAZY;
            }
          // fall through
          case 256: break;
          case 110:
            { return types.LIST;
            }
          // fall through
          case 257: break;
          case 111:
            { return types.LXOR;
            }
          // fall through
          case 258: break;
          case 112:
            { return types.OPEN;
            }
          // fall through
          case 259: break;
          case 113:
            { return types.THEN;
            }
          // fall through
          case 260: break;
          case 114:
            { return types.BOOL_VALUE;
            }
          // fall through
          case 261: break;
          case 115:
            { return types.TYPE;
            }
          // fall through
          case 262: break;
          case 116:
            { return types.UNIT;
            }
          // fall through
          case 263: break;
          case 117:
            { return types.WHEN;
            }
          // fall through
          case 264: break;
          case 118:
            { return types.WITH;
            }
          // fall through
          case 265: break;
          case 119:
            { return types.ASYNC;
            }
          // fall through
          case 266: break;
          case 120:
            { return types.AWAIT;
            }
          // fall through
          case 267: break;
          case 121:
            { return types.BEGIN;
            }
          // fall through
          case 268: break;
          case 122:
            { return types.CATCH;
            }
          // fall through
          case 269: break;
          case 123:
            { return types.CLASS;
            }
          // fall through
          case 270: break;
          case 124:
            { return types.MATCH;
            }
          // fall through
          case 271: break;
          case 125:
            { return types.RAISE;
            }
          // fall through
          case 272: break;
          case 126:
            { return types.WHILE;
            }
          // fall through
          case 273: break;
          case 127:
            { return types.ASSERT;
            }
          // fall through
          case 274: break;
          case 128:
            { return types.DOWNTO;
            }
          // fall through
          case 275: break;
          case 129:
            { return types.METHOD;
            }
          // fall through
          case 276: break;
          case 130:
            { return types.MODULE;
            }
          // fall through
          case 277: break;
          case 131:
            { return types.NONREC;
            }
          // fall through
          case 278: break;
          case 132:
            { return types.OBJECT;
            }
          // fall through
          case 279: break;
          case 133:
            { return types.OPTION;
            }
          // fall through
          case 280: break;
          case 134:
            { return types.STRUCT;
            }
          // fall through
          case 281: break;
          case 135:
            { return types.SWITCH;
            }
          // fall through
          case 282: break;
          case 136:
            { return types.UNPACK;
            }
          // fall through
          case 283: break;
          case 137:
            { return types.FUNCTOR;
            }
          // fall through
          case 284: break;
          case 138:
            { return types.INCLUDE;
            }
          // fall through
          case 285: break;
          case 139:
            { return types.INHERIT;
            }
          // fall through
          case 286: break;
          case 140:
            { return types.MUTABLE;
            }
          // fall through
          case 287: break;
          case 141:
            { return types.PRIVATE;
            }
          // fall through
          case 288: break;
          case 142:
            { return types.VIRTUAL;
            }
          // fall through
          case 289: break;
          case 143:
            { yybegin(IN_DECLARATION); return types.EXTERNAL;
            }
          // fall through
          case 290: break;
          case 144:
            { return types.FUNCTION;
            }
          // fall through
          case 291: break;
          case 145:
            { return types.EXCEPTION;
            }
          // fall through
          case 292: break;
          case 146:
            { return types.CONSTRAINT;
            }
          // fall through
          case 293: break;
          case 147:
            { return types.INITIALIZER;
            }
          // fall through
          case 294: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
