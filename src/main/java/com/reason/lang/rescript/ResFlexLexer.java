/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.reason.lang.rescript;

import com.intellij.lexer.*;
import com.intellij.psi.tree.*;
import com.reason.lang.core.type.*;

import static com.intellij.psi.TokenType.*;

@SuppressWarnings("ALL")

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Rescript.flex</tt>
 */
public class ResFlexLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int INITIAL = 2;
  public static final int IN_TEMPLATE = 4;
  public static final int IN_STRING = 6;
  public static final int IN_ML_COMMENT = 8;
  public static final int IN_SL_COMMENT = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /**
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\1\1\62\1\63\1\2\22\0\1\3\1\76\1\36\1\64\1\115\1\114\1\77\1\6\1"+
    "\102\1\103\1\67\1\70\1\100\1\27\1\24\1\66\1\14\1\23\2\37\4\13\2\7\1\71\1\101"+
    "\1\74\1\72\1\73\1\111\1\110\1\12\1\22\2\12\1\26\1\12\7\5\1\60\1\20\1\31\2"+
    "\5\1\61\4\5\1\16\2\5\1\106\1\32\1\107\1\113\1\10\1\65\1\40\1\21\1\45\1\41"+
    "\1\25\1\11\1\43\1\46\1\44\1\55\1\56\1\47\1\54\1\33\1\17\1\30\1\4\1\35\1\42"+
    "\1\34\1\51\1\57\1\50\1\15\1\53\1\52\1\104\1\75\1\105\1\112\6\0\1\62\242\0"+
    "\2\62\26\0");

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\2\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\5\1\10\2\5\1\12\1\5\1\13"+
    "\1\5\1\14\3\5\1\15\12\5\2\6\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\2\50\1\4\1\51\1\52\3\53\1\54\1\55\2\53"+
    "\2\56\1\0\1\57\1\0\1\10\1\60\1\0\3\5"+
    "\2\10\1\0\1\61\2\5\1\62\1\5\1\63\3\5"+
    "\1\64\1\65\4\5\1\66\6\5\1\67\1\70\3\5"+
    "\1\71\1\72\22\5\2\6\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106"+
    "\1\107\1\110\1\111\1\112\1\113\1\114\1\115\1\116"+
    "\1\117\5\53\1\120\1\121\1\122\1\57\2\122\3\0"+
    "\2\60\1\0\1\123\2\5\3\10\4\5\1\124\2\5"+
    "\1\125\1\5\1\126\1\127\1\5\1\130\1\5\1\131"+
    "\2\5\1\132\1\133\1\5\1\134\1\135\1\136\4\5"+
    "\1\137\10\5\1\140\1\141\2\5\1\142\1\143\6\5"+
    "\1\144\3\5\1\145\1\5\2\6\1\146\1\147\6\0"+
    "\1\5\1\60\1\10\1\5\1\150\4\5\1\151\2\5"+
    "\1\152\1\153\1\154\2\5\1\155\11\5\1\156\1\157"+
    "\1\160\1\161\1\162\1\163\2\5\1\164\5\5\1\165"+
    "\1\166\2\0\1\5\1\60\2\5\1\167\4\5\1\170"+
    "\10\5\1\171\1\172\1\173\3\5\1\174\4\5\1\175"+
    "\1\176\3\5\1\177\1\200\1\201\1\202\1\203\4\5"+
    "\1\204\1\205\1\206\2\5\1\207\3\5\1\210\1\5"+
    "\1\211\1\212\1\5\1\213\1\214\1\215\1\216\3\5"+
    "\1\217\3\5\1\220\1\221";

  private static int [] zzUnpackAction() {
    int [] result = new int[365];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\116\0\234\0\352\0\u0138\0\u0186\0\u01d4\0\u01d4"+
    "\0\u01d4\0\u0222\0\u0270\0\u02be\0\u030c\0\u035a\0\u03a8\0\u02be"+
    "\0\u03f6\0\u0444\0\u0492\0\u04e0\0\u052e\0\u057c\0\u05ca\0\u0618"+
    "\0\u01d4\0\u0666\0\u06b4\0\u0702\0\u01d4\0\u0750\0\u079e\0\u07ec"+
    "\0\u083a\0\u0888\0\u08d6\0\u0924\0\u0972\0\u09c0\0\u0a0e\0\u0a5c"+
    "\0\u0aaa\0\u0af8\0\u01d4\0\u0b46\0\u0b94\0\u0be2\0\u0c30\0\u0c7e"+
    "\0\u01d4\0\u0ccc\0\u0d1a\0\u0d68\0\u0db6\0\u01d4\0\u01d4\0\u01d4"+
    "\0\u01d4\0\u01d4\0\u01d4\0\u01d4\0\u01d4\0\u01d4\0\u01d4\0\u01d4"+
    "\0\u01d4\0\u01d4\0\u0e04\0\u0e04\0\u0e52\0\u0ea0\0\u01d4\0\u01d4"+
    "\0\u01d4\0\u0eee\0\u0f3c\0\u01d4\0\u01d4\0\u0f8a\0\u0fd8\0\u01d4"+
    "\0\u1026\0\u1074\0\u10c2\0\u1110\0\u01d4\0\u115e\0\u11ac\0\u11fa"+
    "\0\u1248\0\u1296\0\u12e4\0\u1332\0\u1380\0\u02be\0\u13ce\0\u141c"+
    "\0\u02be\0\u146a\0\u14b8\0\u1506\0\u1554\0\u15a2\0\u01d4\0\u01d4"+
    "\0\u15f0\0\u163e\0\u168c\0\u16da\0\u02be\0\u1728\0\u1776\0\u17c4"+
    "\0\u1812\0\u1860\0\u18ae\0\u18fc\0\u194a\0\u1998\0\u19e6\0\u1a34"+
    "\0\u02be\0\u1a82\0\u1ad0\0\u1b1e\0\u1b6c\0\u1bba\0\u1c08\0\u1c56"+
    "\0\u1ca4\0\u1cf2\0\u1d40\0\u1d8e\0\u1ddc\0\u1e2a\0\u1e78\0\u1ec6"+
    "\0\u1f14\0\u1f62\0\u1fb0\0\u1ffe\0\u204c\0\u209a\0\u20e8\0\u01d4"+
    "\0\u01d4\0\u01d4\0\u01d4\0\u01d4\0\u01d4\0\u01d4\0\u01d4\0\u01d4"+
    "\0\u01d4\0\u01d4\0\u2136\0\u01d4\0\u01d4\0\u01d4\0\u01d4\0\u01d4"+
    "\0\u01d4\0\u2184\0\u01d4\0\u21d2\0\u2220\0\u226e\0\u22bc\0\u230a"+
    "\0\u01d4\0\u01d4\0\u01d4\0\u2358\0\u2358\0\u1074\0\u23a6\0\u23f4"+
    "\0\u2442\0\u01d4\0\u2490\0\u24de\0\u02be\0\u252c\0\u257a\0\u25c8"+
    "\0\u2616\0\u2664\0\u26b2\0\u2700\0\u274e\0\u279c\0\u01d4\0\u27ea"+
    "\0\u2838\0\u02be\0\u2886\0\u28d4\0\u02be\0\u2922\0\u02be\0\u2970"+
    "\0\u02be\0\u29be\0\u2a0c\0\u02be\0\u02be\0\u2a5a\0\u02be\0\u02be"+
    "\0\u02be\0\u2aa8\0\u2af6\0\u2b44\0\u2b92\0\u02be\0\u2be0\0\u2c2e"+
    "\0\u2c7c\0\u2cca\0\u2d18\0\u2d66\0\u2db4\0\u2e02\0\u02be\0\u02be"+
    "\0\u2e50\0\u2e9e\0\u02be\0\u02be\0\u2eec\0\u2f3a\0\u2f88\0\u2fd6"+
    "\0\u3024\0\u3072\0\u30c0\0\u310e\0\u315c\0\u31aa\0\u02be\0\u31f8"+
    "\0\u3246\0\u3294\0\u01d4\0\u01d4\0\u32e2\0\u3330\0\u337e\0\u33cc"+
    "\0\u341a\0\u3468\0\u34b6\0\u3504\0\u11ac\0\u3552\0\u02be\0\u35a0"+
    "\0\u35ee\0\u363c\0\u368a\0\u02be\0\u36d8\0\u3726\0\u02be\0\u02be"+
    "\0\u02be\0\u3774\0\u37c2\0\u02be\0\u3810\0\u385e\0\u38ac\0\u38fa"+
    "\0\u3948\0\u3996\0\u39e4\0\u3a32\0\u3a80\0\u02be\0\u02be\0\u02be"+
    "\0\u02be\0\u02be\0\u02be\0\u3ace\0\u3b1c\0\u02be\0\u3b6a\0\u3bb8"+
    "\0\u3c06\0\u3c54\0\u3ca2\0\u030c\0\u030c\0\u3cf0\0\u3d3e\0\u3d8c"+
    "\0\u11ac\0\u3dda\0\u3e28\0\u02be\0\u3e76\0\u3ec4\0\u3f12\0\u3f60"+
    "\0\u02be\0\u3fae\0\u3ffc\0\u404a\0\u4098\0\u40e6\0\u4134\0\u4182"+
    "\0\u41d0\0\u02be\0\u02be\0\u02be\0\u421e\0\u426c\0\u42ba\0\u02be"+
    "\0\u4308\0\u4356\0\u43a4\0\u43f2\0\u02be\0\u02be\0\u4440\0\u448e"+
    "\0\u44dc\0\u02be\0\u02be\0\u02be\0\u02be\0\u02be\0\u452a\0\u4578"+
    "\0\u45c6\0\u4614\0\u02be\0\u02be\0\u02be\0\u4662\0\u46b0\0\u02be"+
    "\0\u46fe\0\u474c\0\u479a\0\u02be\0\u47e8\0\u02be\0\u02be\0\u4836"+
    "\0\u02be\0\u02be\0\u02be\0\u02be\0\u4884\0\u48d2\0\u4920\0\u02be"+
    "\0\u496e\0\u49bc\0\u4a0a\0\u02be\0\u02be";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[365];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\116\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\15\1\17\1\22\1\14\1\15"+
    "\1\23\1\15\1\24\1\15\1\17\1\25\1\26\1\15"+
    "\1\27\1\30\1\15\1\31\1\32\1\33\1\34\1\35"+
    "\1\17\1\36\1\37\1\40\1\14\1\41\1\42\1\14"+
    "\1\43\1\44\1\45\2\14\1\46\2\14\1\47\1\50"+
    "\1\51\1\10\1\13\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\1\102\1\10\1\103\1\104\1\105"+
    "\1\106\57\103\1\106\1\103\1\107\16\103\1\72\1\73"+
    "\7\103\1\110\2\111\1\112\27\111\1\113\3\111\1\114"+
    "\23\111\2\10\34\111\1\112\33\111\1\115\23\111\2\10"+
    "\2\111\1\116\1\117\27\111\1\120\1\121\57\111\2\10"+
    "\32\111\117\0\1\11\117\0\1\13\57\0\1\13\36\0"+
    "\20\14\1\0\2\14\1\0\2\14\1\0\3\14\1\0"+
    "\23\14\40\0\20\15\1\0\2\15\1\0\2\15\1\0"+
    "\3\15\1\0\23\15\34\0\1\122\2\0\1\122\1\123"+
    "\3\122\2\123\3\122\1\123\1\122\1\123\1\122\1\123"+
    "\3\122\1\123\2\122\1\123\1\122\1\124\3\123\2\122"+
    "\20\123\2\122\2\0\32\122\4\0\2\125\1\0\2\17"+
    "\2\0\2\17\4\125\2\0\1\17\1\126\2\127\1\0"+
    "\2\125\1\0\3\125\1\0\1\17\2\0\3\125\1\0"+
    "\14\125\40\0\13\14\1\130\4\14\1\0\2\14\1\0"+
    "\2\14\1\0\3\14\1\0\1\14\1\131\10\14\1\132"+
    "\10\14\40\0\2\125\1\0\2\17\2\0\2\17\2\133"+
    "\2\134\2\135\1\17\1\126\2\127\1\0\2\125\1\0"+
    "\3\125\1\0\1\17\2\0\3\125\1\0\14\125\40\0"+
    "\5\14\1\136\7\14\1\137\2\14\1\0\2\14\1\0"+
    "\1\140\1\14\1\0\2\14\1\141\1\0\23\14\40\0"+
    "\20\14\1\0\1\142\1\14\1\0\2\14\1\0\3\14"+
    "\1\0\23\14\60\0\1\143\75\0\11\14\1\144\6\14"+
    "\1\0\2\14\1\0\2\14\1\0\1\145\2\14\1\0"+
    "\10\14\1\146\12\14\60\0\1\147\46\0\1\150\26\0"+
    "\20\14\1\0\2\14\1\0\2\14\1\0\2\14\1\151"+
    "\1\0\12\14\1\152\10\14\40\0\13\14\1\153\4\14"+
    "\1\0\1\154\1\14\1\0\2\14\1\0\3\14\1\0"+
    "\23\14\40\0\13\14\1\155\4\14\1\0\2\14\1\0"+
    "\2\14\1\0\2\14\1\156\1\0\7\14\1\157\4\14"+
    "\1\160\6\14\40\0\20\14\1\0\1\161\1\14\1\0"+
    "\2\14\1\0\3\14\1\0\1\14\1\162\21\14\40\0"+
    "\20\14\1\0\2\14\1\0\2\14\1\0\1\163\2\14"+
    "\1\0\3\14\1\164\17\14\40\0\13\14\1\165\4\14"+
    "\1\0\2\14\1\0\2\14\1\0\3\14\1\0\23\14"+
    "\40\0\20\14\1\0\2\14\1\0\2\14\1\0\1\14"+
    "\1\166\1\14\1\0\5\14\1\167\3\14\1\170\11\14"+
    "\40\0\5\14\1\171\12\14\1\0\2\14\1\0\2\14"+
    "\1\0\1\172\2\14\1\0\23\14\40\0\13\14\1\173"+
    "\4\14\1\0\2\14\1\0\2\14\1\0\3\14\1\0"+
    "\1\14\1\174\6\14\1\175\12\14\40\0\11\14\1\176"+
    "\1\14\1\177\4\14\1\0\1\200\1\14\1\0\2\14"+
    "\1\0\3\14\1\0\1\14\1\201\1\14\1\202\1\14"+
    "\1\203\15\14\40\0\20\14\1\0\2\14\1\0\2\14"+
    "\1\0\3\14\1\0\5\14\1\204\1\14\1\205\13\14"+
    "\40\0\20\14\1\0\2\14\1\0\2\14\1\0\1\206"+
    "\2\14\1\0\23\14\40\0\13\14\1\207\4\14\1\0"+
    "\1\210\1\14\1\0\2\14\1\0\3\14\1\0\1\14"+
    "\1\211\10\14\1\212\10\14\40\0\20\14\1\0\2\14"+
    "\1\0\2\14\1\0\3\14\1\0\1\14\1\213\3\14"+
    "\1\214\15\14\40\0\13\15\1\215\4\15\1\0\2\15"+
    "\1\0\2\15\1\0\3\15\1\0\23\15\40\0\13\15"+
    "\1\216\4\15\1\0\2\15\1\0\2\15\1\0\3\15"+
    "\1\0\23\15\40\0\2\217\2\0\3\217\2\0\6\217"+
    "\2\0\2\217\1\0\2\217\1\0\3\217\2\0\22\217"+
    "\2\0\1\220\55\0\1\221\41\0\1\222\1\223\3\0"+
    "\1\224\46\0\1\225\115\0\1\226\43\0\1\227\116\0"+
    "\1\230\1\231\1\232\114\0\1\233\1\234\51\0\1\235"+
    "\36\0\1\236\3\0\1\237\116\0\1\240\1\0\1\241"+
    "\112\0\1\242\122\0\1\243\16\0\65\103\1\0\16\103"+
    "\2\0\7\103\1\0\1\103\1\104\63\103\1\0\16\103"+
    "\2\0\7\103\1\0\3\103\1\106\57\103\1\106\1\103"+
    "\1\0\16\103\2\0\7\103\2\0\1\111\114\0\1\111"+
    "\1\244\1\245\4\111\1\246\3\111\2\246\1\247\1\111"+
    "\1\250\3\111\1\246\13\111\1\246\22\111\2\0\32\111"+
    "\67\0\1\251\114\0\1\252\30\0\1\120\122\0\1\253"+
    "\113\0\2\254\1\255\15\254\1\0\2\254\1\0\2\254"+
    "\1\0\3\254\1\0\23\254\42\0\1\256\1\257\3\0"+
    "\2\257\1\260\1\0\1\261\1\0\1\122\1\0\1\257"+
    "\6\0\5\122\1\257\62\0\2\262\1\0\2\126\2\0"+
    "\2\126\4\262\2\0\1\126\1\0\2\127\1\0\2\262"+
    "\1\0\3\262\1\0\1\126\2\0\3\262\1\0\14\262"+
    "\43\0\1\263\3\0\2\263\6\0\1\263\3\0\1\264"+
    "\7\0\1\263\30\0\1\264\31\0\20\14\1\0\2\14"+
    "\1\0\2\14\1\0\2\14\1\265\1\0\23\14\40\0"+
    "\20\14\1\0\2\14\1\0\2\14\1\0\3\14\1\0"+
    "\10\14\1\266\12\14\40\0\20\14\1\0\2\14\1\0"+
    "\2\14\1\0\1\267\2\14\1\0\23\14\43\0\1\270"+
    "\1\0\4\270\4\0\3\270\1\0\2\270\10\0\3\270"+
    "\3\0\1\270\63\0\2\271\6\0\1\271\13\0\1\271"+
    "\72\0\1\272\6\0\1\272\76\0\20\14\1\0\2\14"+
    "\1\0\2\14\1\0\3\14\1\0\16\14\1\273\4\14"+
    "\40\0\20\14\1\0\1\274\1\14\1\0\2\14\1\0"+
    "\1\14\1\275\1\14\1\0\23\14\40\0\20\14\1\0"+
    "\2\14\1\0\2\14\1\0\3\14\1\0\4\14\1\276"+
    "\16\14\60\0\1\277\75\0\20\14\1\0\2\14\1\0"+
    "\2\14\1\0\1\14\1\300\1\14\1\0\6\14\1\301"+
    "\14\14\40\0\20\14\1\0\2\14\1\0\2\14\1\0"+
    "\3\14\1\0\2\14\1\302\20\14\40\0\20\14\1\0"+
    "\2\14\1\0\2\14\1\0\3\14\1\0\3\14\1\303"+
    "\17\14\40\0\20\14\1\0\2\14\1\0\2\14\1\0"+
    "\3\14\1\0\5\14\1\304\15\14\40\0\15\14\1\305"+
    "\2\14\1\0\2\14\1\0\2\14\1\0\3\14\1\0"+
    "\23\14\40\0\20\14\1\0\2\14\1\0\2\14\1\0"+
    "\1\306\2\14\1\0\23\14\40\0\20\14\1\0\2\14"+
    "\1\0\2\14\1\0\3\14\1\0\11\14\1\307\11\14"+
    "\40\0\20\14\1\0\2\14\1\0\2\14\1\0\3\14"+
    "\1\0\12\14\1\310\1\14\1\311\6\14\40\0\20\14"+
    "\1\0\1\312\1\14\1\0\2\14\1\0\3\14\1\0"+
    "\23\14\40\0\20\14\1\0\2\14\1\0\1\313\1\14"+
    "\1\0\3\14\1\0\23\14\40\0\5\14\1\314\12\14"+
    "\1\0\2\14\1\0\2\14\1\0\3\14\1\0\6\14"+
    "\1\315\14\14\40\0\20\14\1\0\2\14\1\0\2\14"+
    "\1\0\3\14\1\0\5\14\1\316\3\14\1\317\11\14"+
    "\40\0\20\14\1\0\2\14\1\0\2\14\1\0\3\14"+
    "\1\0\2\14\1\320\20\14\40\0\20\14\1\0\2\14"+
    "\1\0\2\14\1\0\2\14\1\321\1\0\3\14\1\322"+
    "\17\14\40\0\20\14\1\0\2\14\1\0\2\14\1\0"+
    "\1\323\2\14\1\0\11\14\1\324\11\14\40\0\20\14"+
    "\1\0\2\14\1\0\2\14\1\0\2\14\1\325\1\0"+
    "\23\14\40\0\20\14\1\0\2\14\1\0\2\14\1\0"+
    "\3\14\1\0\4\14\1\326\16\14\40\0\20\14\1\0"+
    "\2\14\1\0\2\14\1\0\3\14\1\0\5\14\1\327"+
    "\15\14\40\0\20\14\1\0\2\14\1\0\2\14\1\0"+
    "\3\14\1\0\5\14\1\330\1\331\1\332\13\14\40\0"+
    "\20\14\1\0\2\14\1\0\2\14\1\0\1\333\2\14"+
    "\1\0\23\14\40\0\20\14\1\0\2\14\1\0\2\14"+
    "\1\0\1\14\1\334\1\14\1\0\23\14\40\0\20\14"+
    "\1\0\2\14\1\0\2\14\1\0\3\14\1\0\1\14"+
    "\1\335\21\14\40\0\13\14\1\336\4\14\1\0\2\14"+
    "\1\0\2\14\1\0\3\14\1\0\23\14\40\0\20\14"+
    "\1\0\2\14\1\0\2\14\1\0\2\14\1\337\1\0"+
    "\23\14\40\0\20\14\1\0\2\14\1\0\2\14\1\0"+
    "\1\14\1\340\1\14\1\0\23\14\40\0\20\14\1\0"+
    "\2\14\1\0\2\14\1\0\1\341\2\14\1\0\13\14"+
    "\1\342\7\14\40\0\20\14\1\0\2\14\1\0\2\14"+
    "\1\0\2\14\1\343\1\0\10\14\1\344\12\14\40\0"+
    "\20\14\1\0\2\14\1\0\2\14\1\0\3\14\1\0"+
    "\3\14\1\345\17\14\40\0\20\14\1\0\2\14\1\0"+
    "\2\14\1\0\1\14\1\346\1\14\1\0\23\14\40\0"+
    "\20\14\1\0\1\347\1\14\1\0\2\14\1\0\3\14"+
    "\1\0\5\14\1\350\15\14\40\0\20\14\1\0\2\14"+
    "\1\0\1\351\1\14\1\0\3\14\1\0\5\14\1\352"+
    "\15\14\40\0\20\14\1\0\2\14\1\0\2\14\1\0"+
    "\3\14\1\0\2\14\1\353\20\14\40\0\20\14\1\0"+
    "\2\14\1\0\2\14\1\0\1\14\1\354\1\14\1\0"+
    "\23\14\40\0\20\14\1\0\2\14\1\0\2\14\1\0"+
    "\1\14\1\355\1\14\1\0\23\14\40\0\20\14\1\0"+
    "\2\14\1\0\2\14\1\0\1\14\1\356\1\14\1\0"+
    "\23\14\40\0\20\14\1\0\2\14\1\0\2\14\1\0"+
    "\3\14\1\0\10\14\1\357\12\14\40\0\20\14\1\0"+
    "\2\14\1\0\2\14\1\0\2\14\1\360\1\0\23\14"+
    "\40\0\20\15\1\0\2\15\1\0\2\15\1\0\1\361"+
    "\2\15\1\0\23\15\40\0\20\15\1\0\2\15\1\0"+
    "\2\15\1\0\3\15\1\0\15\15\1\362\5\15\40\0"+
    "\20\217\1\0\2\217\1\0\2\217\1\0\3\217\1\0"+
    "\23\217\126\0\1\363\115\0\1\364\26\0\1\244\113\0"+
    "\1\244\1\0\1\244\121\0\1\365\3\0\2\365\6\0"+
    "\1\365\13\0\1\365\65\0\1\366\1\0\4\366\4\0"+
    "\3\366\1\0\2\366\10\0\3\366\3\0\1\366\64\0"+
    "\1\367\6\0\1\367\13\0\1\367\62\0\20\254\1\0"+
    "\2\254\1\0\2\254\1\0\3\254\1\0\23\254\43\0"+
    "\1\370\3\0\2\370\6\0\1\370\13\0\1\370\65\0"+
    "\1\371\1\0\4\371\4\0\3\371\1\0\2\371\10\0"+
    "\3\371\3\0\1\371\64\0\1\372\6\0\1\372\13\0"+
    "\1\372\62\0\2\262\1\0\2\263\2\0\2\263\4\262"+
    "\2\0\1\263\4\0\2\262\1\0\3\262\1\0\1\263"+
    "\2\0\3\262\1\0\14\262\43\0\1\263\3\0\2\263"+
    "\6\0\1\263\13\0\1\263\62\0\20\14\1\0\2\14"+
    "\1\0\2\14\1\0\3\14\1\0\3\14\1\310\17\14"+
    "\40\0\20\14\1\0\2\14\1\0\2\14\1\0\3\14"+
    "\1\0\6\14\1\373\14\14\40\0\2\125\1\0\6\270"+
    "\4\125\3\270\1\374\2\270\1\0\2\375\1\0\3\125"+
    "\1\0\3\270\3\125\1\270\14\125\40\0\2\125\2\0"+
    "\1\271\2\0\2\271\4\125\2\0\1\271\4\0\2\125"+
    "\1\0\3\125\1\0\1\271\2\0\3\125\1\0\14\125"+
    "\40\0\2\125\2\0\1\272\3\0\1\272\4\125\2\0"+
    "\1\272\4\0\2\125\1\0\3\125\4\0\3\125\1\0"+
    "\14\125\40\0\20\14\1\0\1\376\1\14\1\0\2\14"+
    "\1\0\3\14\1\0\23\14\40\0\20\14\1\0\2\14"+
    "\1\0\2\14\1\0\1\377\2\14\1\0\23\14\40\0"+
    "\20\14\1\0\2\14\1\0\2\14\1\0\3\14\1\0"+
    "\5\14\1\u0100\15\14\40\0\20\14\1\0\2\14\1\0"+
    "\2\14\1\0\3\14\1\0\5\14\1\u0101\15\14\40\0"+
    "\20\14\1\0\1\u0102\1\14\1\0\2\14\1\0\3\14"+
    "\1\0\23\14\40\0\20\14\1\0\1\u0103\1\14\1\0"+
    "\2\14\1\0\3\14\1\0\23\14\40\0\20\14\1\0"+
    "\1\u0104\1\14\1\0\2\14\1\0\3\14\1\0\23\14"+
    "\40\0\20\14\1\0\2\14\1\0\2\14\1\0\3\14"+
    "\1\0\20\14\1\u0105\2\14\40\0\20\14\1\0\2\14"+
    "\1\0\2\14\1\0\2\14\1\u0106\1\0\23\14\40\0"+
    "\20\14\1\0\1\u0107\1\14\1\0\2\14\1\0\3\14"+
    "\1\0\23\14\40\0\20\14\1\0\2\14\1\0\2\14"+
    "\1\0\1\u0108\2\14\1\0\23\14\40\0\20\14\1\0"+
    "\1\u0109\1\14\1\0\2\14\1\0\3\14\1\0\23\14"+
    "\40\0\20\14\1\0\2\14\1\0\2\14\1\0\3\14"+
    "\1\0\3\14\1\u010a\17\14\40\0\20\14\1\0\1\u010b"+
    "\1\14\1\0\2\14\1\0\3\14\1\0\23\14\40\0"+
    "\20\14\1\0\1\u010c\1\14\1\0\2\14\1\0\3\14"+
    "\1\0\23\14\40\0\20\14\1\0\2\14\1\0\2\14"+
    "\1\0\1\u010d\2\14\1\0\23\14\40\0\20\14\1\0"+
    "\2\14\1\0\2\14\1\0\3\14\1\0\12\14\1\u010e"+
    "\10\14\40\0\20\14\1\0\2\14\1\0\2\14\1\0"+
    "\1\14\1\u010f\1\14\1\0\23\14\40\0\20\14\1\0"+
    "\2\14\1\0\2\14\1\0\1\14\1\u0110\1\14\1\0"+
    "\23\14\40\0\20\14\1\0\2\14\1\0\2\14\1\0"+
    "\3\14\1\0\10\14\1\u0111\12\14\40\0\20\14\1\0"+
    "\1\u0112\1\14\1\0\2\14\1\0\3\14\1\0\23\14"+
    "\40\0\20\14\1\0\2\14\1\0\2\14\1\0\3\14"+
    "\1\0\3\14\1\u0113\17\14\40\0\20\14\1\0\2\14"+
    "\1\0\2\14\1\0\3\14\1\0\6\14\1\u0114\14\14"+
    "\40\0\20\14\1\0\2\14\1\0\2\14\1\0\3\14"+
    "\1\0\3\14\1\u0115\17\14\40\0\20\14\1\0\2\14"+
    "\1\0\2\14\1\0\2\14\1\u0116\1\0\23\14\40\0"+
    "\20\14\1\0\2\14\1\0\2\14\1\0\3\14\1\0"+
    "\2\14\1\u0117\20\14\40\0\20\14\1\0\2\14\1\0"+
    "\2\14\1\0\3\14\1\0\14\14\1\u0118\6\14\40\0"+
    "\20\14\1\0\2\14\1\0\2\14\1\0\1\14\1\u0119"+
    "\1\14\1\0\23\14\40\0\20\14\1\0\2\14\1\0"+
    "\2\14\1\0\3\14\1\0\7\14\1\u011a\13\14\40\0"+
    "\20\14\1\0\2\14\1\0\2\14\1\0\1\u011b\2\14"+
    "\1\0\23\14\40\0\20\14\1\0\2\14\1\0\2\14"+
    "\1\0\3\14\1\0\10\14\1\u011c\12\14\40\0\20\14"+
    "\1\0\2\14\1\0\2\14\1\0\3\14\1\0\1\14"+
    "\1\u011d\21\14\40\0\20\14\1\0\2\14\1\0\2\14"+
    "\1\0\1\14\1\u011e\1\14\1\0\23\14\40\0\20\14"+
    "\1\0\2\14\1\0\2\14\1\0\3\14\1\0\12\14"+
    "\1\u011f\10\14\40\0\20\14\1\0\2\14\1\0\2\14"+
    "\1\0\3\14\1\0\7\14\1\u0120\13\14\40\0\20\14"+
    "\1\0\2\14\1\0\2\14\1\0\3\14\1\0\6\14"+
    "\1\u0121\14\14\40\0\20\14\1\0\2\14\1\0\2\14"+
    "\1\0\3\14\1\0\1\14\1\u0122\21\14\40\0\20\14"+
    "\1\0\2\14\1\0\2\14\1\0\1\14\1\u0123\1\14"+
    "\1\0\23\14\40\0\20\15\1\0\1\u0124\1\15\1\0"+
    "\2\15\1\0\3\15\1\0\23\15\40\0\20\15\1\0"+
    "\1\u0125\1\15\1\0\2\15\1\0\3\15\1\0\23\15"+
    "\43\0\1\111\3\0\2\111\6\0\1\111\13\0\1\111"+
    "\65\0\1\111\1\0\4\111\4\0\3\111\1\0\2\111"+
    "\10\0\3\111\3\0\1\111\63\0\2\u0126\6\0\1\u0126"+
    "\13\0\1\u0126\65\0\1\122\3\0\2\122\6\0\1\122"+
    "\13\0\1\122\65\0\1\122\1\0\4\122\4\0\3\122"+
    "\1\0\2\122\10\0\3\122\3\0\1\122\63\0\2\u0127"+
    "\6\0\1\u0127\13\0\1\u0127\62\0\20\14\1\0\2\14"+
    "\1\0\2\14\1\0\1\14\1\u0128\1\14\1\0\23\14"+
    "\40\0\2\262\1\0\6\374\4\262\3\374\1\0\2\374"+
    "\1\0\2\u0129\1\0\3\262\1\0\3\374\3\262\1\374"+
    "\14\262\40\0\20\14\1\0\2\14\1\0\2\14\1\0"+
    "\3\14\1\0\6\14\1\u012a\14\14\40\0\13\14\1\u012b"+
    "\4\14\1\0\2\14\1\0\2\14\1\0\3\14\1\0"+
    "\23\14\40\0\20\14\1\0\2\14\1\0\2\14\1\0"+
    "\1\u012c\2\14\1\0\23\14\40\0\20\14\1\0\2\14"+
    "\1\0\2\14\1\0\2\14\1\u012d\1\0\23\14\40\0"+
    "\20\14\1\0\2\14\1\0\1\u012e\1\14\1\0\3\14"+
    "\1\0\23\14\40\0\20\14\1\0\2\14\1\0\2\14"+
    "\1\0\3\14\1\0\1\14\1\u012f\21\14\40\0\20\14"+
    "\1\0\1\u0130\1\14\1\0\2\14\1\0\3\14\1\0"+
    "\23\14\40\0\20\14\1\0\1\u0131\1\14\1\0\2\14"+
    "\1\0\3\14\1\0\23\14\40\0\20\14\1\0\2\14"+
    "\1\0\2\14\1\0\2\14\1\u0132\1\0\23\14\40\0"+
    "\20\14\1\0\2\14\1\0\2\14\1\0\1\14\1\u0133"+
    "\1\14\1\0\23\14\40\0\20\14\1\0\2\14\1\0"+
    "\2\14\1\0\3\14\1\0\6\14\1\u0134\14\14\40\0"+
    "\20\14\1\0\2\14\1\0\2\14\1\0\3\14\1\0"+
    "\6\14\1\u0135\14\14\40\0\20\14\1\0\2\14\1\0"+
    "\2\14\1\0\3\14\1\0\5\14\1\u0136\15\14\40\0"+
    "\20\14\1\0\2\14\1\0\2\14\1\0\3\14\1\0"+
    "\12\14\1\u0137\10\14\40\0\20\14\1\0\2\14\1\0"+
    "\2\14\1\0\2\14\1\u0138\1\0\23\14\40\0\20\14"+
    "\1\0\2\14\1\0\2\14\1\0\1\14\1\u0139\1\14"+
    "\1\0\23\14\40\0\20\14\1\0\2\14\1\0\2\14"+
    "\1\0\3\14\1\0\7\14\1\u013a\13\14\40\0\20\14"+
    "\1\0\2\14\1\0\2\14\1\0\3\14\1\0\3\14"+
    "\1\u013b\17\14\40\0\20\14\1\0\1\u013c\1\14\1\0"+
    "\2\14\1\0\3\14\1\0\23\14\40\0\20\14\1\0"+
    "\2\14\1\0\2\14\1\0\3\14\1\0\6\14\1\u013d"+
    "\14\14\40\0\20\14\1\0\2\14\1\0\2\14\1\0"+
    "\3\14\1\0\10\14\1\u013e\12\14\40\0\13\14\1\u013f"+
    "\4\14\1\0\2\14\1\0\2\14\1\0\3\14\1\0"+
    "\23\14\40\0\20\14\1\0\2\14\1\0\2\14\1\0"+
    "\3\14\1\0\7\14\1\u0140\13\14\40\0\15\14\1\u0141"+
    "\2\14\1\0\2\14\1\0\2\14\1\0\3\14\1\0"+
    "\23\14\40\0\20\14\1\0\2\14\1\0\2\14\1\0"+
    "\3\14\1\0\12\14\1\u0142\10\14\47\0\2\111\6\0"+
    "\1\111\13\0\1\111\71\0\2\122\6\0\1\122\13\0"+
    "\1\122\62\0\13\14\1\u0143\4\14\1\0\2\14\1\0"+
    "\2\14\1\0\3\14\1\0\5\14\1\u0144\15\14\40\0"+
    "\20\14\1\0\2\14\1\0\2\14\1\0\1\14\1\u0145"+
    "\1\14\1\0\23\14\40\0\20\14\1\0\2\14\1\0"+
    "\2\14\1\0\1\u0146\2\14\1\0\23\14\40\0\20\14"+
    "\1\0\2\14\1\0\2\14\1\0\1\u0147\2\14\1\0"+
    "\23\14\40\0\20\14\1\0\2\14\1\0\2\14\1\0"+
    "\1\14\1\u0148\1\14\1\0\23\14\40\0\20\14\1\0"+
    "\2\14\1\0\2\14\1\0\1\14\1\u0149\1\14\1\0"+
    "\23\14\40\0\20\14\1\0\2\14\1\0\2\14\1\0"+
    "\3\14\1\0\6\14\1\u014a\14\14\40\0\20\14\1\0"+
    "\2\14\1\0\2\14\1\0\1\14\1\u014b\1\14\1\0"+
    "\23\14\40\0\13\14\1\u014c\4\14\1\0\2\14\1\0"+
    "\2\14\1\0\3\14\1\0\23\14\40\0\20\14\1\0"+
    "\2\14\1\0\2\14\1\0\1\14\1\u014d\1\14\1\0"+
    "\23\14\40\0\20\14\1\0\2\14\1\0\2\14\1\0"+
    "\3\14\1\0\7\14\1\u014e\13\14\40\0\20\14\1\0"+
    "\2\14\1\0\2\14\1\0\3\14\1\0\1\14\1\u014f"+
    "\21\14\40\0\20\14\1\0\2\14\1\0\2\14\1\0"+
    "\3\14\1\0\2\14\1\u0150\20\14\40\0\20\14\1\0"+
    "\2\14\1\0\2\14\1\0\3\14\1\0\5\14\1\u0151"+
    "\15\14\40\0\20\14\1\0\2\14\1\0\2\14\1\0"+
    "\2\14\1\u0152\1\0\23\14\40\0\20\14\1\0\2\14"+
    "\1\0\2\14\1\0\3\14\1\0\17\14\1\u0153\3\14"+
    "\40\0\20\14\1\0\1\u0154\1\14\1\0\2\14\1\0"+
    "\3\14\1\0\23\14\40\0\20\14\1\0\2\14\1\0"+
    "\2\14\1\0\3\14\1\0\2\14\1\u0155\20\14\40\0"+
    "\20\14\1\0\2\14\1\0\2\14\1\0\3\14\1\0"+
    "\10\14\1\u0156\12\14\40\0\20\14\1\0\2\14\1\0"+
    "\2\14\1\0\3\14\1\0\1\14\1\u0157\21\14\40\0"+
    "\20\14\1\0\2\14\1\0\2\14\1\0\2\14\1\u0158"+
    "\1\0\23\14\40\0\13\14\1\u0159\4\14\1\0\2\14"+
    "\1\0\2\14\1\0\3\14\1\0\23\14\40\0\20\14"+
    "\1\0\2\14\1\0\2\14\1\0\3\14\1\0\1\14"+
    "\1\u015a\21\14\40\0\20\14\1\0\2\14\1\0\2\14"+
    "\1\0\3\14\1\0\5\14\1\u015b\15\14\40\0\20\14"+
    "\1\0\1\u015c\1\14\1\0\2\14\1\0\3\14\1\0"+
    "\23\14\40\0\20\14\1\0\2\14\1\0\2\14\1\0"+
    "\3\14\1\0\10\14\1\u015d\12\14\40\0\20\14\1\0"+
    "\1\u015e\1\14\1\0\2\14\1\0\3\14\1\0\23\14"+
    "\40\0\20\14\1\0\2\14\1\0\2\14\1\0\1\14"+
    "\1\u015f\1\14\1\0\23\14\40\0\20\14\1\0\2\14"+
    "\1\0\2\14\1\0\3\14\1\0\1\14\1\u0160\21\14"+
    "\40\0\20\14\1\0\1\u0161\1\14\1\0\2\14\1\0"+
    "\3\14\1\0\23\14\40\0\20\14\1\0\2\14\1\0"+
    "\2\14\1\0\3\14\1\0\10\14\1\u0162\12\14\40\0"+
    "\20\14\1\0\2\14\1\0\2\14\1\0\1\u0163\2\14"+
    "\1\0\23\14\40\0\20\14\1\0\2\14\1\0\2\14"+
    "\1\0\3\14\1\0\10\14\1\u0164\12\14\40\0\13\14"+
    "\1\u0165\4\14\1\0\2\14\1\0\2\14\1\0\3\14"+
    "\1\0\23\14\40\0\20\14\1\0\2\14\1\0\2\14"+
    "\1\0\3\14\1\0\5\14\1\u0166\15\14\40\0\20\14"+
    "\1\0\2\14\1\0\2\14\1\0\3\14\1\0\5\14"+
    "\1\u0167\15\14\40\0\20\14\1\0\2\14\1\0\2\14"+
    "\1\0\1\u0168\2\14\1\0\23\14\40\0\20\14\1\0"+
    "\2\14\1\0\2\14\1\0\3\14\1\0\13\14\1\u0169"+
    "\7\14\40\0\20\14\1\0\2\14\1\0\2\14\1\0"+
    "\1\u016a\2\14\1\0\23\14\40\0\20\14\1\0\1\u016b"+
    "\1\14\1\0\2\14\1\0\3\14\1\0\23\14\40\0"+
    "\20\14\1\0\2\14\1\0\2\14\1\0\1\14\1\u016c"+
    "\1\14\1\0\23\14\40\0\20\14\1\0\2\14\1\0"+
    "\2\14\1\0\2\14\1\u016d\1\0\23\14\34\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19032];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\3\11\17\1\1\11\3\1\1\11\15\1\1\11"+
    "\5\1\1\11\4\1\15\11\4\1\3\11\2\1\2\11"+
    "\2\1\1\11\1\1\1\0\1\1\1\0\1\11\1\1"+
    "\1\0\5\1\1\0\11\1\2\11\47\1\13\11\1\1"+
    "\6\11\1\1\1\11\5\1\3\11\3\1\3\0\1\11"+
    "\1\1\1\0\12\1\1\11\63\1\2\11\6\0\53\1"+
    "\2\0\106\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[365];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    public ResFlexLexer(ORLangTypes types) {
        this.types = types;
    }

    private int yyline;
    private ORLangTypes types;
    private int tokenStartIndex;
    private CharSequence quotedStringId;
    private int commentDepth;
    private boolean inCommentString = false;

    //Store the start index of a token
    private void tokenStart() {
        tokenStartIndex = zzStartRead;
    }

    //Set the start index of the token to the stored index
    private void tokenEnd() {
        zzStartRead = tokenStartIndex;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ResFlexLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        switch (zzLexicalState) {
            case IN_TEMPLATE: {
              yybegin(INITIAL);
            }  // fall though
            case 366: break;
            case IN_STRING: {
              yybegin(INITIAL); tokenEnd(); return types.STRING_VALUE;
            }  // fall though
            case 367: break;
            case IN_ML_COMMENT: {
              yybegin(INITIAL); tokenEnd(); return types.MULTI_COMMENT;
            }  // fall though
            case 368: break;
            case IN_SL_COMMENT: {
              yybegin(INITIAL); tokenEnd(); return types.SINGLE_COMMENT;
            }  // fall though
            case 369: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yybegin(INITIAL); yypushback(1);
            }
            // fall through
          case 146: break;
          case 2:
            { return BAD_CHARACTER;
            }
            // fall through
          case 147: break;
          case 3:
            { return types.EOL;
            }
            // fall through
          case 148: break;
          case 4:
            { return WHITE_SPACE;
            }
            // fall through
          case 149: break;
          case 5:
            { return types.LIDENT;
            }
            // fall through
          case 150: break;
          case 6:
            { return types.UIDENT;
            }
            // fall through
          case 151: break;
          case 7:
            { return types.SINGLE_QUOTE;
            }
            // fall through
          case 152: break;
          case 8:
            { return types.INT_VALUE;
            }
            // fall through
          case 153: break;
          case 9:
            { return types.UNDERSCORE;
            }
            // fall through
          case 154: break;
          case 10:
            { return types.DOT;
            }
            // fall through
          case 155: break;
          case 11:
            { return types.MINUS;
            }
            // fall through
          case 156: break;
          case 12:
            { return types.BACKSLASH;
            }
            // fall through
          case 157: break;
          case 13:
            { yybegin(IN_STRING); tokenStart();
            }
            // fall through
          case 158: break;
          case 14:
            { return types.SHARP;
            }
            // fall through
          case 159: break;
          case 15:
            { yybegin(IN_TEMPLATE); return types.JS_STRING_OPEN;
            }
            // fall through
          case 160: break;
          case 16:
            { return types.SLASH;
            }
            // fall through
          case 161: break;
          case 17:
            { return types.STAR;
            }
            // fall through
          case 162: break;
          case 18:
            { return types.PLUS;
            }
            // fall through
          case 163: break;
          case 19:
            { return types.COLON;
            }
            // fall through
          case 164: break;
          case 20:
            { return types.EQ;
            }
            // fall through
          case 165: break;
          case 21:
            { return types.GT;
            }
            // fall through
          case 166: break;
          case 22:
            { return types.LT;
            }
            // fall through
          case 167: break;
          case 23:
            { return types.PIPE;
            }
            // fall through
          case 168: break;
          case 24:
            { return types.EXCLAMATION_MARK;
            }
            // fall through
          case 169: break;
          case 25:
            { return types.AMPERSAND;
            }
            // fall through
          case 170: break;
          case 26:
            { return types.COMMA;
            }
            // fall through
          case 171: break;
          case 27:
            { return types.SEMI;
            }
            // fall through
          case 172: break;
          case 28:
            { return types.LPAREN;
            }
            // fall through
          case 173: break;
          case 29:
            { return types.RPAREN;
            }
            // fall through
          case 174: break;
          case 30:
            { return types.LBRACE;
            }
            // fall through
          case 175: break;
          case 31:
            { return types.RBRACE;
            }
            // fall through
          case 176: break;
          case 32:
            { return types.LBRACKET;
            }
            // fall through
          case 177: break;
          case 33:
            { return types.RBRACKET;
            }
            // fall through
          case 178: break;
          case 34:
            { return types.ARROBASE;
            }
            // fall through
          case 179: break;
          case 35:
            { return types.QUESTION_MARK;
            }
            // fall through
          case 180: break;
          case 36:
            { return types.TILDE;
            }
            // fall through
          case 181: break;
          case 37:
            { return types.CARRET;
            }
            // fall through
          case 182: break;
          case 38:
            { return types.PERCENT;
            }
            // fall through
          case 183: break;
          case 39:
            { return types.STRING_VALUE;
            }
            // fall through
          case 184: break;
          case 40:
            { yybegin(INITIAL);
            }
            // fall through
          case 185: break;
          case 41:
            { yybegin(INITIAL); return types.JS_STRING_CLOSE;
            }
            // fall through
          case 186: break;
          case 42:
            { return types.DOLLAR;
            }
            // fall through
          case 187: break;
          case 43:
            {
            }
            // fall through
          case 188: break;
          case 44:
            { yybegin(INITIAL); tokenEnd(); return types.STRING_VALUE;
            }
            // fall through
          case 189: break;
          case 45:
            { inCommentString = !inCommentString;
            }
            // fall through
          case 190: break;
          case 46:
            { yybegin(INITIAL); tokenEnd(); return types.SINGLE_COMMENT;
            }
            // fall through
          case 191: break;
          case 47:
            { return types.TYPE_ARGUMENT;
            }
            // fall through
          case 192: break;
          case 48:
            { return types.FLOAT_VALUE;
            }
            // fall through
          case 193: break;
          case 49:
            { return types.OF;
            }
            // fall through
          case 194: break;
          case 50:
            { return types.OR;
            }
            // fall through
          case 195: break;
          case 51:
            { return types.DOTDOT;
            }
            // fall through
          case 196: break;
          case 52:
            { return types.MINUSDOT;
            }
            // fall through
          case 197: break;
          case 53:
            { return types.RIGHT_ARROW;
            }
            // fall through
          case 198: break;
          case 54:
            { return types.TO;
            }
            // fall through
          case 199: break;
          case 55:
            { return types.AS;
            }
            // fall through
          case 200: break;
          case 56:
            { return types.DO;
            }
            // fall through
          case 201: break;
          case 57:
            { return types.IF;
            }
            // fall through
          case 202: break;
          case 58:
            { return types.IN;
            }
            // fall through
          case 203: break;
          case 59:
            { return types.POLY_VARIANT;
            }
            // fall through
          case 204: break;
          case 60:
            { return types.SHARPSHARP;
            }
            // fall through
          case 205: break;
          case 61:
            { return types.SLASHDOT;
            }
            // fall through
          case 206: break;
          case 62:
            { yybegin(IN_SL_COMMENT); tokenStart();
            }
            // fall through
          case 207: break;
          case 63:
            { yybegin(IN_ML_COMMENT); commentDepth = 1; tokenStart();
            }
            // fall through
          case 208: break;
          case 64:
            { return types.TAG_AUTO_CLOSE;
            }
            // fall through
          case 209: break;
          case 65:
            { return types.STARDOT;
            }
            // fall through
          case 210: break;
          case 66:
            { return types.PLUSDOT;
            }
            // fall through
          case 211: break;
          case 67:
            { return types.STRING_CONCAT;
            }
            // fall through
          case 212: break;
          case 68:
            { return types.SHORTCUT;
            }
            // fall through
          case 213: break;
          case 69:
            { return types.COLON_EQ;
            }
            // fall through
          case 214: break;
          case 70:
            { return types.COLON_GT;
            }
            // fall through
          case 215: break;
          case 71:
            { return types.EQEQ;
            }
            // fall through
          case 216: break;
          case 72:
            { return types.ARROW;
            }
            // fall through
          case 217: break;
          case 73:
            { return types.LEFT_ARROW;
            }
            // fall through
          case 218: break;
          case 74:
            { return types.TAG_LT_SLASH;
            }
            // fall through
          case 219: break;
          case 75:
            { return types.LT_OR_EQUAL;
            }
            // fall through
          case 220: break;
          case 76:
            { return types.PIPE_FORWARD;
            }
            // fall through
          case 221: break;
          case 77:
            { return types.L_OR;
            }
            // fall through
          case 222: break;
          case 78:
            { return types.NOT_EQ;
            }
            // fall through
          case 223: break;
          case 79:
            { return types.L_AND;
            }
            // fall through
          case 224: break;
          case 80:
            { if (!inCommentString) commentDepth += 1;
            }
            // fall through
          case 225: break;
          case 81:
            { if (!inCommentString) { commentDepth -= 1; if(commentDepth == 0) { yybegin(INITIAL); tokenEnd(); return types.MULTI_COMMENT; } }
            }
            // fall through
          case 226: break;
          case 82:
            { return types.CHAR_VALUE;
            }
            // fall through
          case 227: break;
          case 83:
            { return types.FOR;
            }
            // fall through
          case 228: break;
          case 84:
            { return types.DOTDOTDOT;
            }
            // fall through
          case 229: break;
          case 85:
            { return types.END;
            }
            // fall through
          case 230: break;
          case 86:
            { return types.PRI;
            }
            // fall through
          case 231: break;
          case 87:
            { return types.PUB;
            }
            // fall through
          case 232: break;
          case 88:
            { return types.NEW;
            }
            // fall through
          case 233: break;
          case 89:
            { return types.TRY;
            }
            // fall through
          case 234: break;
          case 90:
            { return types.REF;
            }
            // fall through
          case 235: break;
          case 91:
            { return types.REC;
            }
            // fall through
          case 236: break;
          case 92:
            { return types.RAW;
            }
            // fall through
          case 237: break;
          case 93:
            { return types.AND;
            }
            // fall through
          case 238: break;
          case 94:
            { return types.ASR;
            }
            // fall through
          case 239: break;
          case 95:
            { return types.SIG;
            }
            // fall through
          case 240: break;
          case 96:
            { return types.LOR;
            }
            // fall through
          case 241: break;
          case 97:
            { return types.LET;
            }
            // fall through
          case 242: break;
          case 98:
            { return types.LSR;
            }
            // fall through
          case 243: break;
          case 99:
            { return types.LSL;
            }
            // fall through
          case 244: break;
          case 100:
            { return types.MOD;
            }
            // fall through
          case 245: break;
          case 101:
            { return types.VAL;
            }
            // fall through
          case 246: break;
          case 102:
            { return types.EQEQEQ;
            }
            // fall through
          case 247: break;
          case 103:
            { return types.NOT_EQEQ;
            }
            // fall through
          case 248: break;
          case 104:
            { return types.OPEN;
            }
            // fall through
          case 249: break;
          case 105:
            { return types.ELSE;
            }
            // fall through
          case 250: break;
          case 106:
            { return types.BOOL_VALUE;
            }
            // fall through
          case 251: break;
          case 107:
            { return types.THEN;
            }
            // fall through
          case 252: break;
          case 108:
            { return types.TYPE;
            }
            // fall through
          case 253: break;
          case 109:
            { return types.DONE;
            }
            // fall through
          case 254: break;
          case 110:
            { return types.LXOR;
            }
            // fall through
          case 255: break;
          case 111:
            { return types.LAND;
            }
            // fall through
          case 256: break;
          case 112:
            { return types.LAZY;
            }
            // fall through
          case 257: break;
          case 113:
            { return types.LIST;
            }
            // fall through
          case 258: break;
          case 114:
            { return types.WITH;
            }
            // fall through
          case 259: break;
          case 115:
            { return types.WHEN;
            }
            // fall through
          case 260: break;
          case 116:
            { return types.UNIT;
            }
            // fall through
          case 261: break;
          case 117:
            { return types.NONE;
            }
            // fall through
          case 262: break;
          case 118:
            { return types.SOME;
            }
            // fall through
          case 263: break;
          case 119:
            { return types.BEGIN;
            }
            // fall through
          case 264: break;
          case 120:
            { return types.RAISE;
            }
            // fall through
          case 265: break;
          case 121:
            { return types.CATCH;
            }
            // fall through
          case 266: break;
          case 122:
            { return types.CLASS;
            }
            // fall through
          case 267: break;
          case 123:
            { return types.WHILE;
            }
            // fall through
          case 268: break;
          case 124:
            { return types.MATCH;
            }
            // fall through
          case 269: break;
          case 125:
            { return types.OBJECT;
            }
            // fall through
          case 270: break;
          case 126:
            { return types.OPTION;
            }
            // fall through
          case 271: break;
          case 127:
            { return types.NONREC;
            }
            // fall through
          case 272: break;
          case 128:
            { return types.ASSERT;
            }
            // fall through
          case 273: break;
          case 129:
            { return types.DOWNTO;
            }
            // fall through
          case 274: break;
          case 130:
            { return types.STRUCT;
            }
            // fall through
          case 275: break;
          case 131:
            { return types.SWITCH;
            }
            // fall through
          case 276: break;
          case 132:
            { return types.UNPACK;
            }
            // fall through
          case 277: break;
          case 133:
            { return types.MODULE;
            }
            // fall through
          case 278: break;
          case 134:
            { return types.METHOD;
            }
            // fall through
          case 279: break;
          case 135:
            { return types.FUNCTOR;
            }
            // fall through
          case 280: break;
          case 136:
            { return types.PRIVATE;
            }
            // fall through
          case 281: break;
          case 137:
            { return types.INCLUDE;
            }
            // fall through
          case 282: break;
          case 138:
            { return types.INHERIT;
            }
            // fall through
          case 283: break;
          case 139:
            { return types.MUTABLE;
            }
            // fall through
          case 284: break;
          case 140:
            { return types.VIRTUAL;
            }
            // fall through
          case 285: break;
          case 141:
            { return types.FUNCTION;
            }
            // fall through
          case 286: break;
          case 142:
            { return types.EXTERNAL;
            }
            // fall through
          case 287: break;
          case 143:
            { return types.EXCEPTION;
            }
            // fall through
          case 288: break;
          case 144:
            { return types.CONSTRAINT;
            }
            // fall through
          case 289: break;
          case 145:
            { return types.INITIALIZER;
            }
            // fall through
          case 290: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
