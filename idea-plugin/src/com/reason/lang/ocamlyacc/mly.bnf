{
  /* https://caml.inria.fr/pub/docs/manual-ocaml/lexyacc.html */

  parserClass="com.reason.lang.ocamlyacc.OclYaccParser"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="OclYacc"
  psiImplClassSuffix="Impl"
  psiPackage="com.reason.lang.core.psi.ocamlyacc"
  psiImplPackage="com.reason.lang.core.psi.ocamlyacc.impl"

  elementTypeHolderClass="com.reason.lang.ocamlyacc.OclYaccTypes"
  elementTypeClass="com.reason.lang.ocamlyacc.OclYaccElementType"
  tokenTypeClass="com.reason.lang.ocamlyacc.OclYaccTokenType"

  psiImplUtilClass="com.reason.lang.ocamlyacc.OclYaccPsiImplUtil"
}

yacc ::= COMMENT* header? declarations SECTION_SEPARATOR rules (SECTION_SEPARATOR trailer)?

header ::= HEADER_START OCAML_LAZY_NODE HEADER_STOP {
    implements="com.reason.lang.core.psi.PsiStructuredElement"
    methods=[getPresentation]
}

private declarations ::= declaration+

declaration ::= token_dcl | start_dcl | type_dcl | left_dcl | right_dcl {
    implements="com.reason.lang.core.psi.PsiStructuredElement"
    methods=[getPresentation]
}
private token_dcl ::= TOKEN (LT type_expr GT)? constr constr*
private start_dcl ::= START symbol symbol*
private type_dcl ::= TYPE LT type_expr GT symbol symbol*
private left_dcl  ::= LEFT symbol symbol*
private right_dcl ::= RIGHT symbol symbol*

private type_expr ::= IDENT (DOT IDENT)*
private constr ::= IDENT
private symbol ::= IDENT

private rules ::= rule+
rule ::= IDENT COLON rule_body { pin=2
    implements="com.reason.lang.core.psi.PsiStructuredElement"
    methods=[getPresentation]
}
rule_body ::= PIPE? rule_pattern (PIPE rule_pattern)* SEMI
rule_pattern ::= symbol* LBRACE semantic_action RBRACE
private semantic_action ::= OCAML_LAZY_NODE

trailer ::= OCAML_LAZY_NODE {
   implements="com.reason.lang.core.psi.PsiStructuredElement"
   methods=[getPresentation]
}