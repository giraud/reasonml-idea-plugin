"use strict";(self.webpackChunk_reasonml_idea_plugin_website=self.webpackChunk_reasonml_idea_plugin_website||[]).push([[257],{815:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var s=t(4848),r=t(8453);const i={id:"faq",title:"FAQ",sidebar_label:"FAQ",slug:"/get-started/faq"},o=void 0,a={id:"Other/faq",title:"FAQ",description:"- Why don't you consider using Language Server Protocol?",source:"@site/docs/Other/faq.md",sourceDirName:"Other",slug:"/get-started/faq",permalink:"/reasonml-idea-plugin/docs/get-started/faq",draft:!1,unlisted:!1,editUrl:"https://github.com/giraud/reasonml-idea-plugin/edit/master/website/docs/Other/faq.md",tags:[],version:"current",frontMatter:{id:"faq",title:"FAQ",sidebar_label:"FAQ",slug:"/get-started/faq"},sidebar:"tutorialSidebar",previous:{title:"Resources",permalink:"/reasonml-idea-plugin/docs/contributing/resources"},next:{title:"Live Templates",permalink:"/reasonml-idea-plugin/docs/get-started/live-templates"}},l={},d=[];function c(e){const n={a:"a",code:"code",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Why don't you consider using Language Server Protocol?"})}),"\n",(0,s.jsx)(n.p,{children:"Mainly because I want a strong integration in the IDE, and I need a first class support of Windows."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"What versions do the plugin support at the moment?"})}),"\n",(0,s.jsxs)(n.p,{children:["The latest version of the plugin supports ",(0,s.jsx)(n.strong,{children:"IDEA 2020.3"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:["How is it different from ",(0,s.jsx)(n.a,{href:"https://github.com/sidharthkuruvila/ocaml-ide",children:"ocaml language plugin"}),"?"]})}),"\n",(0,s.jsx)(n.p,{children:"I wanted to have a plugin dedicated to reason and that's why I created one called ReasonML, not OCaml.\nThen I realised that I still need OCaml support and that people are asking for it."}),"\n",(0,s.jsx)(n.p,{children:"I started this plugin by studying and copying parts of the ocaml plugin, but now the 2 projects are taking different orientations, technically."}),"\n",(0,s.jsx)(n.p,{children:"I am moving away from merlin and trying to use the most of IntelliJ structures."}),"\n",(0,s.jsx)(n.p,{children:"Now, they have incompatible implementations, and different goals."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:["Modules from ",(0,s.jsx)(n.code,{children:"node_modules"})," folder are not resolved (GoTo is not working on ",(0,s.jsx)(n.code,{children:"Array.sort"}),")?"]})}),"\n",(0,s.jsxs)(n.p,{children:["Ensure that ",(0,s.jsx)(n.code,{children:"node_modules"})," folder is not excluded from IDE index."]}),"\n"]}),"\n"]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var s=t(6540);const r={},i=s.createContext(r);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);